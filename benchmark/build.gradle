plugins {
    id 'java'
    id 'application'
//    id 'com.github.johnrengelman.shadow' version '5.2.0'
    id 'me.champeau.jmh' version '0.6.6'
}

mainClassName = 'kr.sanchez.specdeser.benchmark.SpeculativeBenchmark'

group 'kr.sanchez.specdeser'
version '0.1'

repositories {
    mavenCentral()
}

ext {
    jmhVersion = '1.34'
    asyncProfilerPath = '/home/carlos/Java_Tools/async-profiler-2.7-arg-linux-x64/build/libasyncProfiler.so'
    HEAP_SIZE = '8g'
}

dependencies {
    jmh project(':core')
//    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
//    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'

    jmh group:'jakarta.json', name:'jakarta.json-api', version:'1.1.6'
    jmh group: 'org.eclipse', name: 'yasson', version: '1.0.8'
    jmh group:'com.fasterxml.jackson.core', name:'jackson-core', version:'2.13.1'
    jmh group: 'org.openjdk.jmh', name: 'jmh-core', version: "${jmhVersion}"
    jmh group: 'org.openjdk.jmh', name: 'jmh-generator-annprocess', version: "${jmhVersion}"
}

jmh {
    includes = [
//            'parserSpeculativeRandom10*|parserSpeculativeConstant10*|parserSpeculative(Fixed|KeyFixed)10Keys10*LengthSpeculative',
            'intrMicro_(Simd)?equals'
    ]
    jvmArgs = [
            '-server',
            // Debug flags
//            "-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:5005",
            // GraalVM Flags
            "-Dgraal.CompilationFailureAction=Diagnose",
            "-Dgraal.DumpOnError=true",
            "-Dgraal.ShowDumpFiles=true",
            "-Dgraal.PrintGraph=Network",
            "-Dgraal.ObjdumpExecutables=objdump,gobjdump",
            "-Dgraalvm.locatorDisabled=true",
            // JVM Flags
            "-XX:+UnlockExperimentalVMOptions",
            "-XX:+EnableJVMCI",
            "-XX:+UseJVMCICompiler",
            "-XX:AutoBoxCacheMax=20000",
            "-XX:+UseBiasedLocking",
            "-XX:BiasedLockingStartupDelay=500",
            "-Xms${HEAP_SIZE}",
            "-Xmx${HEAP_SIZE}",
            // Graal Compiling Graphs
//            '-Dgraal.Dump=:2',
//            '-Dgraal.MethodFilter=kr.sanchez.specdeser.core.jakarta.*.*,org.glassfish.json.*.*,com.fasterxml.jackson.core.UTF8StreamJsonParser.*'
            ]
    benchmarkMode = ['thrpt']
    fork = 1
    warmupIterations = 3
    warmup = '5s'
    iterations = 5
    timeOnIteration = '5s'
    threads = 1
//    profilers = ["async:libPath=${asyncProfilerPath};dir=profile-results"]
    resultFormat='CSV'
    resultsFile = project.file("results/jmh/test_simd.csv")
}

jmhJar {
    archiveName = 'specdeser-benchmark.jar'
    exclude 'META-INF/*.SF'
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
}

test {
    useJUnitPlatform()
}