--- Execution profile ---
Total samples       : 5756

--- 38541372706 ns (66.93%), 3854 samples
  [ 0] /usr/lib/x86_64-linux-gnu/libc-2.31.so
  [ 1] MemAllocator::allocate() const
  [ 2] TypeArrayKlass::allocate_common(int, bool, JavaThread*)
  [ 3] JVMCIRuntime::new_array_common(JavaThread*, Klass*, int, bool)
  [ 4] java.util.concurrent.ThreadLocalRandom.nextSeed
  [ 5] java.util.concurrent.ThreadLocalRandom.nextInt
  [ 6] jdk.internal.util.random.RandomSupport.boundedNextInt
  [ 7] java.util.random.RandomGenerator.nextInt
  [ 8] java.util.concurrent.ThreadLocalRandom.nextInt
  [ 9] kr.sanchez.specdeser.benchmark.SpeculativeBenchmark.parserSpeculativeRegular
  [10] kr.sanchez.specdeser.benchmark.jmh_generated.SpeculativeBenchmark_parserSpeculativeRegular_jmhTest.parserSpeculativeRegular_thrpt_jmhStub
  [11] kr.sanchez.specdeser.benchmark.jmh_generated.SpeculativeBenchmark_parserSpeculativeRegular_jmhTest.parserSpeculativeRegular_Throughput
  [12] jdk.internal.reflect.GeneratedMethodAccessor3.invoke
  [13] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [14] java.lang.reflect.Method.invoke
  [15] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [16] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [17] java.util.concurrent.FutureTask.run
  [18] java.util.concurrent.Executors$RunnableAdapter.call
  [19] java.util.concurrent.FutureTask.run
  [20] java.util.concurrent.ThreadPoolExecutor.runWorker
  [21] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [22] java.lang.Thread.run

--- 9650369757 ns (16.76%), 965 samples
  [ 0] /usr/lib/x86_64-linux-gnu/libc-2.31.so
  [ 1] MemAllocator::allocate() const
  [ 2] TypeArrayKlass::allocate_common(int, bool, JavaThread*)
  [ 3] JVMCIRuntime::new_array_common(JavaThread*, Klass*, int, bool)
  [ 4] java.util.concurrent.ThreadLocalRandom.nextSeed
  [ 5] java.util.concurrent.ThreadLocalRandom.nextInt
  [ 6] jdk.internal.util.random.RandomSupport.boundedNextInt
  [ 7] java.util.random.RandomGenerator.nextInt
  [ 8] java.util.concurrent.ThreadLocalRandom.nextInt
  [ 9] kr.sanchez.specdeser.benchmark.SpeculativeBenchmark.parserSpeculativeRegular
  [10] kr.sanchez.specdeser.benchmark.jmh_generated.SpeculativeBenchmark_parserSpeculativeRegular_jmhTest.parserSpeculativeRegular_thrpt_jmhStub
  [11] kr.sanchez.specdeser.benchmark.jmh_generated.SpeculativeBenchmark_parserSpeculativeRegular_jmhTest.parserSpeculativeRegular_Throughput
  [12] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [13] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [14] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [15] java.lang.reflect.Method.invoke
  [16] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [17] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [18] java.util.concurrent.FutureTask.run
  [19] java.util.concurrent.Executors$RunnableAdapter.call
  [20] java.util.concurrent.FutureTask.run
  [21] java.util.concurrent.ThreadPoolExecutor.runWorker
  [22] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [23] java.lang.Thread.run

--- 6782227131 ns (11.78%), 678 samples
  [ 0] /usr/lib/x86_64-linux-gnu/libc-2.31.so
  [ 1] MarkBitMap::do_clear(MemRegion, bool)
  [ 2] G1ClearBitMapTask::G1ClearBitmapHRClosure::do_heap_region(HeapRegion*)
  [ 3] HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const
  [ 4] G1ClearBitMapTask::work(unsigned int)
  [ 5] GangWorker::loop()
  [ 6] GangWorker::run()
  [ 7] Thread::call_run()
  [ 8] thread_native_entry(Thread*)
  [ 9] start_thread

--- 243247122 ns (0.42%), 24 samples
  [ 0] HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const
  [ 1] G1PrepareEvacuationTask::work(unsigned int)
  [ 2] GangWorker::loop()
  [ 3] GangWorker::run()
  [ 4] Thread::call_run()
  [ 5] thread_native_entry(Thread*)
  [ 6] start_thread

--- 171840437 ns (0.30%), 17 samples
  [ 0] SpinPause
  [ 1] G1ParEvacuateFollowersClosure::do_void()
  [ 2] G1EvacuateRegionsTask::evacuate_live_objects(G1ParScanThreadState*, unsigned int)
  [ 3] G1EvacuateRegionsBaseTask::work(unsigned int)
  [ 4] GangWorker::loop()
  [ 5] GangWorker::run()
  [ 6] Thread::call_run()
  [ 7] thread_native_entry(Thread*)
  [ 8] start_thread

--- 121559911 ns (0.21%), 12 samples
  [ 0] void WeakProcessor::Task::work<G1STWIsAliveClosure, G1KeepAliveClosure>(unsigned int, G1STWIsAliveClosure*, G1KeepAliveClosure*)
  [ 1] GangWorker::loop()
  [ 2] GangWorker::run()
  [ 3] Thread::call_run()
  [ 4] thread_native_entry(Thread*)
  [ 5] start_thread

--- 101004212 ns (0.18%), 10 samples
  [ 0] G1ParCopyClosure<(G1Barrier)1, true>::do_oop(oopDesc**)
  [ 1] ClassLoaderData::ChunkedHandleList::oops_do(OopClosure*)
  [ 2] G1CLDScanClosure::do_cld(ClassLoaderData*)
  [ 3] ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*)
  [ 4] G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int)
  [ 5] G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int)
  [ 6] G1EvacuateRegionsTask::scan_roots(G1ParScanThreadState*, unsigned int)
  [ 7] G1EvacuateRegionsBaseTask::work(unsigned int)
  [ 8] GangWorker::loop()
  [ 9] GangWorker::run()
  [10] Thread::call_run()
  [11] thread_native_entry(Thread*)
  [12] start_thread

--- 80896817 ns (0.14%), 8 samples
  [ 0] /usr/lib/x86_64-linux-gnu/libc-2.31.so
  [ 1] G1FreeHumongousRegionClosure::do_heap_region(HeapRegion*)
  [ 2] HeapRegionManager::iterate(HeapRegionClosure*) const
  [ 3] G1PostEvacuateCollectionSetCleanupTask2::EagerlyReclaimHumongousObjectsTask::do_work(unsigned int)
  [ 4] G1BatchedGangTask::work(unsigned int)
  [ 5] GangWorker::loop()
  [ 6] GangWorker::run()
  [ 7] Thread::call_run()
  [ 8] thread_native_entry(Thread*)
  [ 9] start_thread

--- 60752219 ns (0.11%), 6 samples
  [ 0] G1PrepareEvacuationTask::G1PrepareRegionsClosure::do_heap_region(HeapRegion*)
  [ 1] HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const
  [ 2] G1PrepareEvacuationTask::work(unsigned int)
  [ 3] GangWorker::loop()
  [ 4] GangWorker::run()
  [ 5] Thread::call_run()
  [ 6] thread_native_entry(Thread*)
  [ 7] start_thread

--- 50602249 ns (0.09%), 5 samples
  [ 0] ClassLoaderData::ChunkedHandleList::oops_do(OopClosure*)
  [ 1] G1CLDScanClosure::do_cld(ClassLoaderData*)
  [ 2] ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*)
  [ 3] G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int)
  [ 4] G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int)
  [ 5] G1EvacuateRegionsTask::scan_roots(G1ParScanThreadState*, unsigned int)
  [ 6] G1EvacuateRegionsBaseTask::work(unsigned int)
  [ 7] GangWorker::loop()
  [ 8] GangWorker::run()
  [ 9] Thread::call_run()
  [10] thread_native_entry(Thread*)
  [11] start_thread

--- 50193164 ns (0.09%), 5 samples
  [ 0] ClassLoaderDataGraph::clear_claimed_marks()
  [ 1] G1CollectedHeap::do_collection_pause_at_safepoint_helper(double)
  [ 2] G1CollectedHeap::do_collection_pause_at_safepoint(double)
  [ 3] VM_G1TryInitiateConcMark::doit()
  [ 4] VM_Operation::evaluate()
  [ 5] VMThread::evaluate_operation(VM_Operation*)
  [ 6] VMThread::inner_execute(VM_Operation*)
  [ 7] VMThread::run()
  [ 8] Thread::call_run()
  [ 9] thread_native_entry(Thread*)
  [10] start_thread

--- 40492600 ns (0.07%), 4 samples
  [ 0] G1RemSet::prepare_region_for_scan(HeapRegion*)
  [ 1] HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const
  [ 2] G1PrepareEvacuationTask::work(unsigned int)
  [ 3] GangWorker::loop()
  [ 4] GangWorker::run()
  [ 5] Thread::call_run()
  [ 6] thread_native_entry(Thread*)
  [ 7] start_thread

--- 40046134 ns (0.07%), 4 samples
  [ 0] __softirqentry_text_start_[k]
  [ 1] irq_exit_rcu_[k]
  [ 2] sysvec_apic_timer_interrupt_[k]
  [ 3] asm_sysvec_apic_timer_interrupt_[k]
  [ 4] /usr/lib/x86_64-linux-gnu/libc-2.31.so
  [ 5] MarkBitMap::do_clear(MemRegion, bool)
  [ 6] G1ClearBitMapTask::G1ClearBitmapHRClosure::do_heap_region(HeapRegion*)
  [ 7] HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const
  [ 8] G1ClearBitMapTask::work(unsigned int)
  [ 9] GangWorker::loop()
  [10] GangWorker::run()
  [11] Thread::call_run()
  [12] thread_native_entry(Thread*)
  [13] start_thread

--- 40032987 ns (0.07%), 4 samples
  [ 0] /usr/lib/x86_64-linux-gnu/libc-2.31.so
  [ 1] G1BlockOffsetTablePart::set_for_starts_humongous(HeapWordImpl**, unsigned long)
  [ 2] G1CollectedHeap::humongous_obj_allocate_initialize_regions(HeapRegion*, unsigned int, unsigned long)
  [ 3] G1CollectedHeap::humongous_obj_allocate(unsigned long)
  [ 4] G1CollectedHeap::attempt_allocation_humongous(unsigned long)
  [ 5] MemAllocator::allocate() const
  [ 6] TypeArrayKlass::allocate_common(int, bool, JavaThread*)
  [ 7] JVMCIRuntime::new_array_common(JavaThread*, Klass*, int, bool)
  [ 8] java.util.concurrent.ThreadLocalRandom.nextSeed
  [ 9] java.util.concurrent.ThreadLocalRandom.nextInt
  [10] jdk.internal.util.random.RandomSupport.boundedNextInt
  [11] java.util.random.RandomGenerator.nextInt
  [12] java.util.concurrent.ThreadLocalRandom.nextInt
  [13] kr.sanchez.specdeser.benchmark.SpeculativeBenchmark.parserSpeculativeRegular
  [14] kr.sanchez.specdeser.benchmark.jmh_generated.SpeculativeBenchmark_parserSpeculativeRegular_jmhTest.parserSpeculativeRegular_thrpt_jmhStub
  [15] kr.sanchez.specdeser.benchmark.jmh_generated.SpeculativeBenchmark_parserSpeculativeRegular_jmhTest.parserSpeculativeRegular_Throughput
  [16] jdk.internal.reflect.GeneratedMethodAccessor3.invoke
  [17] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [18] java.lang.reflect.Method.invoke
  [19] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [20] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [21] java.util.concurrent.FutureTask.run
  [22] java.util.concurrent.Executors$RunnableAdapter.call
  [23] java.util.concurrent.FutureTask.run
  [24] java.util.concurrent.ThreadPoolExecutor.runWorker
  [25] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [26] java.lang.Thread.run

--- 39997328 ns (0.07%), 4 samples
  [ 0] HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const
  [ 1] G1ClearBitMapTask::work(unsigned int)
  [ 2] GangWorker::loop()
  [ 3] GangWorker::run()
  [ 4] Thread::call_run()
  [ 5] thread_native_entry(Thread*)
  [ 6] start_thread

--- 30508953 ns (0.05%), 3 samples
  [ 0] native_queued_spin_lock_slowpath_[k]
  [ 1] _raw_spin_lock_[k]
  [ 2] futex_wait_setup_[k]
  [ 3] futex_wait_[k]
  [ 4] do_futex_[k]
  [ 5] __x64_sys_futex_[k]
  [ 6] do_syscall_64_[k]
  [ 7] entry_SYSCALL_64_after_hwframe_[k]
  [ 8] do_futex_wait.constprop.0
  [ 9] [unknown]

--- 30474983 ns (0.05%), 3 samples
  [ 0] __vdso_clock_gettime

--- 30430281 ns (0.05%), 3 samples
  [ 0] __vdso_clock_gettime
  [ 1] clock_gettime

--- 30047847 ns (0.05%), 3 samples
  [ 0] G1CollectedHeap::humongous_obj_allocate_initialize_regions(HeapRegion*, unsigned int, unsigned long)
  [ 1] G1CollectedHeap::humongous_obj_allocate(unsigned long)
  [ 2] G1CollectedHeap::attempt_allocation_humongous(unsigned long)
  [ 3] MemAllocator::allocate() const
  [ 4] TypeArrayKlass::allocate_common(int, bool, JavaThread*)
  [ 5] JVMCIRuntime::new_array_common(JavaThread*, Klass*, int, bool)
  [ 6] java.util.concurrent.ThreadLocalRandom.nextSeed
  [ 7] java.util.concurrent.ThreadLocalRandom.nextInt
  [ 8] jdk.internal.util.random.RandomSupport.boundedNextInt
  [ 9] java.util.random.RandomGenerator.nextInt
  [10] java.util.concurrent.ThreadLocalRandom.nextInt
  [11] kr.sanchez.specdeser.benchmark.SpeculativeBenchmark.parserSpeculativeRegular
  [12] kr.sanchez.specdeser.benchmark.jmh_generated.SpeculativeBenchmark_parserSpeculativeRegular_jmhTest.parserSpeculativeRegular_thrpt_jmhStub
  [13] kr.sanchez.specdeser.benchmark.jmh_generated.SpeculativeBenchmark_parserSpeculativeRegular_jmhTest.parserSpeculativeRegular_Throughput
  [14] jdk.internal.reflect.GeneratedMethodAccessor3.invoke
  [15] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [16] java.lang.reflect.Method.invoke
  [17] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [18] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [19] java.util.concurrent.FutureTask.run
  [20] java.util.concurrent.Executors$RunnableAdapter.call
  [21] java.util.concurrent.FutureTask.run
  [22] java.util.concurrent.ThreadPoolExecutor.runWorker
  [23] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [24] java.lang.Thread.run

--- 29995328 ns (0.05%), 3 samples
  [ 0] java.lang.StringCoding.hasNegatives
  [ 1] java.lang.String.<init>
  [ 2] java.lang.String.<init>
  [ 3] kr.sanchez.specdeser.core.jakarta.FallbackParser.getString
  [ 4] kr.sanchez.specdeser.benchmark.SpeculativeBenchmark.parserSpeculativeRegular
  [ 5] kr.sanchez.specdeser.benchmark.jmh_generated.SpeculativeBenchmark_parserSpeculativeRegular_jmhTest.parserSpeculativeRegular_thrpt_jmhStub
  [ 6] kr.sanchez.specdeser.benchmark.jmh_generated.SpeculativeBenchmark_parserSpeculativeRegular_jmhTest.parserSpeculativeRegular_Throughput
  [ 7] jdk.internal.reflect.GeneratedMethodAccessor3.invoke
  [ 8] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 9] java.lang.reflect.Method.invoke
  [10] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] java.util.concurrent.FutureTask.run
  [13] java.util.concurrent.Executors$RunnableAdapter.call
  [14] java.util.concurrent.FutureTask.run
  [15] java.util.concurrent.ThreadPoolExecutor.runWorker
  [16] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [17] java.lang.Thread.run

--- 29978918 ns (0.05%), 3 samples
  [ 0] /usr/lib/x86_64-linux-gnu/libc-2.31.so
  [ 1] G1BlockOffsetTablePart::set_for_starts_humongous(HeapWordImpl**, unsigned long)
  [ 2] G1CollectedHeap::humongous_obj_allocate_initialize_regions(HeapRegion*, unsigned int, unsigned long)
  [ 3] G1CollectedHeap::humongous_obj_allocate(unsigned long)
  [ 4] G1CollectedHeap::attempt_allocation_humongous(unsigned long)
  [ 5] MemAllocator::allocate() const
  [ 6] TypeArrayKlass::allocate_common(int, bool, JavaThread*)
  [ 7] JVMCIRuntime::new_array_common(JavaThread*, Klass*, int, bool)
  [ 8] java.util.concurrent.ThreadLocalRandom.nextSeed
  [ 9] java.util.concurrent.ThreadLocalRandom.nextInt
  [10] jdk.internal.util.random.RandomSupport.boundedNextInt
  [11] java.util.random.RandomGenerator.nextInt
  [12] java.util.concurrent.ThreadLocalRandom.nextInt
  [13] kr.sanchez.specdeser.benchmark.SpeculativeBenchmark.parserSpeculativeRegular
  [14] kr.sanchez.specdeser.benchmark.jmh_generated.SpeculativeBenchmark_parserSpeculativeRegular_jmhTest.parserSpeculativeRegular_thrpt_jmhStub
  [15] kr.sanchez.specdeser.benchmark.jmh_generated.SpeculativeBenchmark_parserSpeculativeRegular_jmhTest.parserSpeculativeRegular_Throughput
  [16] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [17] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [18] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [19] java.lang.reflect.Method.invoke
  [20] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [21] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [22] java.util.concurrent.FutureTask.run
  [23] java.util.concurrent.Executors$RunnableAdapter.call
  [24] java.util.concurrent.FutureTask.run
  [25] java.util.concurrent.ThreadPoolExecutor.runWorker
  [26] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [27] java.lang.Thread.run

--- 20361741 ns (0.04%), 2 samples
  [ 0] G1ParCopyClosure<(G1Barrier)0, true>::do_oop(oopDesc**)
  [ 1] G1RootProcessor::process_vm_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int)
  [ 2] G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int)
  [ 3] G1EvacuateRegionsTask::scan_roots(G1ParScanThreadState*, unsigned int)
  [ 4] G1EvacuateRegionsBaseTask::work(unsigned int)
  [ 5] GangWorker::loop()
  [ 6] GangWorker::run()
  [ 7] Thread::call_run()
  [ 8] thread_native_entry(Thread*)
  [ 9] start_thread

--- 20262704 ns (0.04%), 2 samples
  [ 0] schedule_[k]
  [ 1] futex_wait_queue_me_[k]
  [ 2] futex_wait_[k]
  [ 3] do_futex_[k]
  [ 4] __x64_sys_futex_[k]
  [ 5] do_syscall_64_[k]
  [ 6] entry_SYSCALL_64_after_hwframe_[k]
  [ 7] do_futex_wait.constprop.0
  [ 8] [unknown]

--- 20260191 ns (0.04%), 2 samples
  [ 0] G1ParCopyClosure<(G1Barrier)0, true>::do_oop(oopDesc**)
  [ 1] InterpreterOopMap::iterate_oop(OffsetClosure*) const
  [ 2] frame::oops_interpreted_do(OopClosure*, RegisterMap const*, bool) const
  [ 3] JavaThread::oops_do_frames(OopClosure*, CodeBlobClosure*) [clone .part.0]
  [ 4] Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*)
  [ 5] G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int)
  [ 6] G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int)
  [ 7] G1EvacuateRegionsTask::scan_roots(G1ParScanThreadState*, unsigned int)
  [ 8] G1EvacuateRegionsBaseTask::work(unsigned int)
  [ 9] GangWorker::loop()
  [10] GangWorker::run()
  [11] Thread::call_run()
  [12] thread_native_entry(Thread*)
  [13] start_thread

--- 20152275 ns (0.03%), 2 samples
  [ 0] OopMapCache::lookup(methodHandle const&, int, InterpreterOopMap*)
  [ 1] Method::mask_for(int, InterpreterOopMap*)
  [ 2] frame::oops_interpreted_do(OopClosure*, RegisterMap const*, bool) const
  [ 3] JavaThread::oops_do_frames(OopClosure*, CodeBlobClosure*) [clone .part.0]
  [ 4] Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*)
  [ 5] G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int)
  [ 6] G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int)
  [ 7] G1EvacuateRegionsTask::scan_roots(G1ParScanThreadState*, unsigned int)
  [ 8] G1EvacuateRegionsBaseTask::work(unsigned int)
  [ 9] GangWorker::loop()
  [10] GangWorker::run()
  [11] Thread::call_run()
  [12] thread_native_entry(Thread*)
  [13] start_thread

--- 20143930 ns (0.03%), 2 samples
  [ 0] GCIdMark::GCIdMark(unsigned int)
  [ 1] GangWorker::loop()
  [ 2] GangWorker::run()
  [ 3] Thread::call_run()
  [ 4] thread_native_entry(Thread*)
  [ 5] start_thread

--- 20127109 ns (0.03%), 2 samples
  [ 0] G1RebuildFreeListTask::work(unsigned int)
  [ 1] GangWorker::loop()
  [ 2] GangWorker::run()
  [ 3] Thread::call_run()
  [ 4] thread_native_entry(Thread*)
  [ 5] start_thread

--- 20100175 ns (0.03%), 2 samples
  [ 0] __lock_text_start_[k]
  [ 1] try_to_wake_up_[k]
  [ 2] wake_up_q_[k]
  [ 3] futex_wake_[k]
  [ 4] do_futex_[k]
  [ 5] __x64_sys_futex_[k]
  [ 6] do_syscall_64_[k]
  [ 7] entry_SYSCALL_64_after_hwframe_[k]
  [ 8] sem_post@@GLIBC_2.2.5
  [ 9] WorkGang::run_task(AbstractGangTask*, unsigned int, bool)
  [10] G1CollectedHeap::pre_evacuate_collection_set(G1EvacuationInfo&, G1ParScanThreadStateSet*)
  [11] G1CollectedHeap::do_collection_pause_at_safepoint_helper(double)
  [12] G1CollectedHeap::do_collection_pause_at_safepoint(double)
  [13] VM_G1TryInitiateConcMark::doit()
  [14] VM_Operation::evaluate()
  [15] VMThread::evaluate_operation(VM_Operation*)
  [16] VMThread::inner_execute(VM_Operation*)
  [17] VMThread::run()
  [18] Thread::call_run()
  [19] thread_native_entry(Thread*)
  [20] start_thread

--- 20086034 ns (0.03%), 2 samples
  [ 0] __lock_text_start_[k]
  [ 1] try_to_wake_up_[k]
  [ 2] wake_up_q_[k]
  [ 3] futex_wake_[k]
  [ 4] do_futex_[k]
  [ 5] __x64_sys_futex_[k]
  [ 6] do_syscall_64_[k]
  [ 7] entry_SYSCALL_64_after_hwframe_[k]
  [ 8] sem_post@@GLIBC_2.2.5
  [ 9] WorkGang::run_task(AbstractGangTask*, unsigned int, bool)
  [10] SafepointSynchronize::do_cleanup_tasks()
  [11] SafepointSynchronize::begin()
  [12] VMThread::inner_execute(VM_Operation*)
  [13] VMThread::run()
  [14] Thread::call_run()
  [15] thread_native_entry(Thread*)
  [16] start_thread

--- 20038801 ns (0.03%), 2 samples
  [ 0] __softirqentry_text_start_[k]
  [ 1] irq_exit_rcu_[k]
  [ 2] sysvec_apic_timer_interrupt_[k]
  [ 3] asm_sysvec_apic_timer_interrupt_[k]
  [ 4] /usr/lib/x86_64-linux-gnu/libc-2.31.so
  [ 5] MemAllocator::allocate() const
  [ 6] TypeArrayKlass::allocate_common(int, bool, JavaThread*)
  [ 7] JVMCIRuntime::new_array_common(JavaThread*, Klass*, int, bool)
  [ 8] java.util.concurrent.ThreadLocalRandom.nextSeed
  [ 9] java.util.concurrent.ThreadLocalRandom.nextInt
  [10] jdk.internal.util.random.RandomSupport.boundedNextInt
  [11] java.util.random.RandomGenerator.nextInt
  [12] java.util.concurrent.ThreadLocalRandom.nextInt
  [13] kr.sanchez.specdeser.benchmark.SpeculativeBenchmark.parserSpeculativeRegular
  [14] kr.sanchez.specdeser.benchmark.jmh_generated.SpeculativeBenchmark_parserSpeculativeRegular_jmhTest.parserSpeculativeRegular_thrpt_jmhStub
  [15] kr.sanchez.specdeser.benchmark.jmh_generated.SpeculativeBenchmark_parserSpeculativeRegular_jmhTest.parserSpeculativeRegular_Throughput
  [16] jdk.internal.reflect.GeneratedMethodAccessor3.invoke
  [17] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [18] java.lang.reflect.Method.invoke
  [19] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [20] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [21] java.util.concurrent.FutureTask.run
  [22] java.util.concurrent.Executors$RunnableAdapter.call
  [23] java.util.concurrent.FutureTask.run
  [24] java.util.concurrent.ThreadPoolExecutor.runWorker
  [25] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [26] java.lang.Thread.run

--- 20013554 ns (0.03%), 2 samples
  [ 0] update_blocked_averages_[k]
  [ 1] run_rebalance_domains_[k]
  [ 2] __softirqentry_text_start_[k]
  [ 3] irq_exit_rcu_[k]
  [ 4] sysvec_apic_timer_interrupt_[k]
  [ 5] asm_sysvec_apic_timer_interrupt_[k]
  [ 6] /usr/lib/x86_64-linux-gnu/libc-2.31.so
  [ 7] MarkBitMap::do_clear(MemRegion, bool)
  [ 8] G1ClearBitMapTask::G1ClearBitmapHRClosure::do_heap_region(HeapRegion*)
  [ 9] HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const
  [10] G1ClearBitMapTask::work(unsigned int)
  [11] GangWorker::loop()
  [12] GangWorker::run()
  [13] Thread::call_run()
  [14] thread_native_entry(Thread*)
  [15] start_thread

--- 20004928 ns (0.03%), 2 samples
  [ 0] HeapRegionManager::find_contiguous_in_free_list(unsigned int)
  [ 1] HeapRegionManager::allocate_humongous(unsigned int)
  [ 2] G1CollectedHeap::humongous_obj_allocate(unsigned long)
  [ 3] G1CollectedHeap::attempt_allocation_humongous(unsigned long)
  [ 4] MemAllocator::allocate() const
  [ 5] TypeArrayKlass::allocate_common(int, bool, JavaThread*)
  [ 6] JVMCIRuntime::new_array_common(JavaThread*, Klass*, int, bool)
  [ 7] java.util.concurrent.ThreadLocalRandom.nextSeed
  [ 8] java.util.concurrent.ThreadLocalRandom.nextInt
  [ 9] jdk.internal.util.random.RandomSupport.boundedNextInt
  [10] java.util.random.RandomGenerator.nextInt
  [11] java.util.concurrent.ThreadLocalRandom.nextInt
  [12] kr.sanchez.specdeser.benchmark.SpeculativeBenchmark.parserSpeculativeRegular
  [13] kr.sanchez.specdeser.benchmark.jmh_generated.SpeculativeBenchmark_parserSpeculativeRegular_jmhTest.parserSpeculativeRegular_thrpt_jmhStub
  [14] kr.sanchez.specdeser.benchmark.jmh_generated.SpeculativeBenchmark_parserSpeculativeRegular_jmhTest.parserSpeculativeRegular_Throughput
  [15] jdk.internal.reflect.GeneratedMethodAccessor3.invoke
  [16] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [17] java.lang.reflect.Method.invoke
  [18] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [19] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [20] java.util.concurrent.FutureTask.run
  [21] java.util.concurrent.Executors$RunnableAdapter.call
  [22] java.util.concurrent.FutureTask.run
  [23] java.util.concurrent.ThreadPoolExecutor.runWorker
  [24] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [25] java.lang.Thread.run

--- 19998855 ns (0.03%), 2 samples
  [ 0] G1FromCardCache::clear(unsigned int)
  [ 1] G1RemSetTrackingPolicy::update_at_allocate(HeapRegion*)
  [ 2] G1CollectedHeap::humongous_obj_allocate_initialize_regions(HeapRegion*, unsigned int, unsigned long)
  [ 3] G1CollectedHeap::humongous_obj_allocate(unsigned long)
  [ 4] G1CollectedHeap::attempt_allocation_humongous(unsigned long)
  [ 5] MemAllocator::allocate() const
  [ 6] TypeArrayKlass::allocate_common(int, bool, JavaThread*)
  [ 7] JVMCIRuntime::new_array_common(JavaThread*, Klass*, int, bool)
  [ 8] java.util.concurrent.ThreadLocalRandom.nextSeed
  [ 9] java.util.concurrent.ThreadLocalRandom.nextInt
  [10] jdk.internal.util.random.RandomSupport.boundedNextInt
  [11] java.util.random.RandomGenerator.nextInt
  [12] java.util.concurrent.ThreadLocalRandom.nextInt
  [13] kr.sanchez.specdeser.benchmark.SpeculativeBenchmark.parserSpeculativeRegular
  [14] kr.sanchez.specdeser.benchmark.jmh_generated.SpeculativeBenchmark_parserSpeculativeRegular_jmhTest.parserSpeculativeRegular_thrpt_jmhStub
  [15] kr.sanchez.specdeser.benchmark.jmh_generated.SpeculativeBenchmark_parserSpeculativeRegular_jmhTest.parserSpeculativeRegular_Throughput
  [16] jdk.internal.reflect.GeneratedMethodAccessor3.invoke
  [17] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [18] java.lang.reflect.Method.invoke
  [19] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [20] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [21] java.util.concurrent.FutureTask.run
  [22] java.util.concurrent.Executors$RunnableAdapter.call
  [23] java.util.concurrent.FutureTask.run
  [24] java.util.concurrent.ThreadPoolExecutor.runWorker
  [25] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [26] java.lang.Thread.run

--- 19998775 ns (0.03%), 2 samples
  [ 0] HeapRegionRemSet::clear_fcc()
  [ 1] G1CollectedHeap::humongous_obj_allocate_initialize_regions(HeapRegion*, unsigned int, unsigned long)
  [ 2] G1CollectedHeap::humongous_obj_allocate(unsigned long)
  [ 3] G1CollectedHeap::attempt_allocation_humongous(unsigned long)
  [ 4] MemAllocator::allocate() const
  [ 5] TypeArrayKlass::allocate_common(int, bool, JavaThread*)
  [ 6] JVMCIRuntime::new_array_common(JavaThread*, Klass*, int, bool)
  [ 7] java.util.concurrent.ThreadLocalRandom.nextSeed
  [ 8] java.util.concurrent.ThreadLocalRandom.nextInt
  [ 9] jdk.internal.util.random.RandomSupport.boundedNextInt
  [10] java.util.random.RandomGenerator.nextInt
  [11] java.util.concurrent.ThreadLocalRandom.nextInt
  [12] kr.sanchez.specdeser.benchmark.SpeculativeBenchmark.parserSpeculativeRegular
  [13] kr.sanchez.specdeser.benchmark.jmh_generated.SpeculativeBenchmark_parserSpeculativeRegular_jmhTest.parserSpeculativeRegular_thrpt_jmhStub
  [14] kr.sanchez.specdeser.benchmark.jmh_generated.SpeculativeBenchmark_parserSpeculativeRegular_jmhTest.parserSpeculativeRegular_Throughput
  [15] jdk.internal.reflect.GeneratedMethodAccessor3.invoke
  [16] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [17] java.lang.reflect.Method.invoke
  [18] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [19] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [20] java.util.concurrent.FutureTask.run
  [21] java.util.concurrent.Executors$RunnableAdapter.call
  [22] java.util.concurrent.FutureTask.run
  [23] java.util.concurrent.ThreadPoolExecutor.runWorker
  [24] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [25] java.lang.Thread.run

--- 19998465 ns (0.03%), 2 samples
  [ 0] G1FromCardCache::clear(unsigned int)
  [ 1] G1RemSetTrackingPolicy::update_at_allocate(HeapRegion*)
  [ 2] G1CollectedHeap::humongous_obj_allocate_initialize_regions(HeapRegion*, unsigned int, unsigned long)
  [ 3] G1CollectedHeap::humongous_obj_allocate(unsigned long)
  [ 4] G1CollectedHeap::attempt_allocation_humongous(unsigned long)
  [ 5] MemAllocator::allocate() const
  [ 6] TypeArrayKlass::allocate_common(int, bool, JavaThread*)
  [ 7] JVMCIRuntime::new_array_common(JavaThread*, Klass*, int, bool)
  [ 8] java.util.concurrent.ThreadLocalRandom.nextSeed
  [ 9] java.util.concurrent.ThreadLocalRandom.nextInt
  [10] jdk.internal.util.random.RandomSupport.boundedNextInt
  [11] java.util.random.RandomGenerator.nextInt
  [12] java.util.concurrent.ThreadLocalRandom.nextInt
  [13] kr.sanchez.specdeser.benchmark.SpeculativeBenchmark.parserSpeculativeRegular
  [14] kr.sanchez.specdeser.benchmark.jmh_generated.SpeculativeBenchmark_parserSpeculativeRegular_jmhTest.parserSpeculativeRegular_thrpt_jmhStub
  [15] kr.sanchez.specdeser.benchmark.jmh_generated.SpeculativeBenchmark_parserSpeculativeRegular_jmhTest.parserSpeculativeRegular_Throughput
  [16] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [17] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [18] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [19] java.lang.reflect.Method.invoke
  [20] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [21] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [22] java.util.concurrent.FutureTask.run
  [23] java.util.concurrent.Executors$RunnableAdapter.call
  [24] java.util.concurrent.FutureTask.run
  [25] java.util.concurrent.ThreadPoolExecutor.runWorker
  [26] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [27] java.lang.Thread.run

--- 19997234 ns (0.03%), 2 samples
  [ 0] kr.sanchez.specdeser.core.jakarta.ContextStack.<init>
  [ 1] kr.sanchez.specdeser.core.jakarta.FallbackParser.<init>
  [ 2] kr.sanchez.specdeser.benchmark.SpeculativeBenchmark.parserSpeculativeRegular
  [ 3] kr.sanchez.specdeser.benchmark.jmh_generated.SpeculativeBenchmark_parserSpeculativeRegular_jmhTest.parserSpeculativeRegular_thrpt_jmhStub
  [ 4] kr.sanchez.specdeser.benchmark.jmh_generated.SpeculativeBenchmark_parserSpeculativeRegular_jmhTest.parserSpeculativeRegular_Throughput
  [ 5] jdk.internal.reflect.GeneratedMethodAccessor3.invoke
  [ 6] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 7] java.lang.reflect.Method.invoke
  [ 8] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [ 9] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [10] java.util.concurrent.FutureTask.run
  [11] java.util.concurrent.Executors$RunnableAdapter.call
  [12] java.util.concurrent.FutureTask.run
  [13] java.util.concurrent.ThreadPoolExecutor.runWorker
  [14] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [15] java.lang.Thread.run

--- 19990641 ns (0.03%), 2 samples
  [ 0] MarkBitMap::do_clear(MemRegion, bool)
  [ 1] G1ClearBitMapTask::G1ClearBitmapHRClosure::do_heap_region(HeapRegion*)
  [ 2] HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const
  [ 3] G1ClearBitMapTask::work(unsigned int)
  [ 4] GangWorker::loop()
  [ 5] GangWorker::run()
  [ 6] Thread::call_run()
  [ 7] thread_native_entry(Thread*)
  [ 8] start_thread

--- 10280282 ns (0.02%), 1 sample
  [ 0] pthread_cond_timedwait@@GLIBC_2.3.2
  [ 1] [unknown]

--- 10213000 ns (0.02%), 1 sample
  [ 0] metaspace::VirtualSpaceList::vslist_nonclass()
  [ 1] MetaspaceUtils::get_statistics(Metaspace::MetadataType)
  [ 2] MetaspaceUtils::get_combined_statistics()
  [ 3] CollectedHeap::create_metaspace_summary()
  [ 4] G1CollectedHeap::trace_heap(GCWhen::Type, GCTracer const*)
  [ 5] G1ConcurrentMark::concurrent_cycle_end()
  [ 6] G1ConcurrentMarkThread::run_service()
  [ 7] ConcurrentGCThread::run()
  [ 8] Thread::call_run()
  [ 9] thread_native_entry(Thread*)
  [10] start_thread

--- 10200073 ns (0.02%), 1 sample
  [ 0] __pthread_mutex_unlock_usercnt
  [ 1] [unknown]

--- 10185840 ns (0.02%), 1 sample
  [ 0] CollectedHeap::tlab_alloc_reserve() const
  [ 1] G1PLABAllocator::G1PLABAllocator(G1Allocator*)
  [ 2] G1ParScanThreadState::G1ParScanThreadState(G1CollectedHeap*, G1RedirtyCardsQueueSet*, unsigned int, unsigned int, unsigned long, unsigned long)
  [ 3] G1ParScanThreadStateSet::state_for_worker(unsigned int)
  [ 4] G1EvacuateRegionsBaseTask::work(unsigned int)
  [ 5] GangWorker::loop()
  [ 6] GangWorker::run()
  [ 7] Thread::call_run()
  [ 8] thread_native_entry(Thread*)
  [ 9] start_thread

--- 10180856 ns (0.02%), 1 sample
  [ 0] _IO_default_xsputn

--- 10178975 ns (0.02%), 1 sample
  [ 0] G1ParScanThreadState::steal_and_trim_queue(GenericTaskQueueSet<OverflowTaskQueue<ScannerTask, (MEMFLAGS)5, 131072u>, (MEMFLAGS)5>*)
  [ 1] G1ParEvacuateFollowersClosure::do_void()
  [ 2] G1EvacuateRegionsTask::evacuate_live_objects(G1ParScanThreadState*, unsigned int)
  [ 3] G1EvacuateRegionsBaseTask::work(unsigned int)
  [ 4] GangWorker::loop()
  [ 5] GangWorker::run()
  [ 6] Thread::call_run()
  [ 7] thread_native_entry(Thread*)
  [ 8] start_thread

--- 10178405 ns (0.02%), 1 sample
  [ 0] G1FreeHumongousRegionClosure::do_heap_region(HeapRegion*)
  [ 1] HeapRegionManager::iterate(HeapRegionClosure*) const
  [ 2] G1PostEvacuateCollectionSetCleanupTask2::EagerlyReclaimHumongousObjectsTask::do_work(unsigned int)
  [ 3] G1BatchedGangTask::work(unsigned int)
  [ 4] GangWorker::loop()
  [ 5] GangWorker::run()
  [ 6] Thread::call_run()
  [ 7] thread_native_entry(Thread*)
  [ 8] start_thread

--- 10173457 ns (0.02%), 1 sample
  [ 0] G1ParScanThreadStateSet::state_for_worker(unsigned int)
  [ 1] G1EvacuateRegionsBaseTask::work(unsigned int)
  [ 2] GangWorker::loop()
  [ 3] GangWorker::run()
  [ 4] Thread::call_run()
  [ 5] thread_native_entry(Thread*)
  [ 6] start_thread

--- 10169286 ns (0.02%), 1 sample
  [ 0] __lock_text_start_[k]
  [ 1] try_to_wake_up_[k]
  [ 2] wake_up_q_[k]
  [ 3] futex_wake_[k]
  [ 4] do_futex_[k]
  [ 5] __x64_sys_futex_[k]
  [ 6] do_syscall_64_[k]
  [ 7] entry_SYSCALL_64_after_hwframe_[k]
  [ 8] __pthread_cond_broadcast

--- 10166840 ns (0.02%), 1 sample
  [ 0] OopStorage::BasicParState::increment_num_dead(unsigned long)
  [ 1] GangWorker::loop()
  [ 2] GangWorker::run()
  [ 3] Thread::call_run()
  [ 4] thread_native_entry(Thread*)
  [ 5] start_thread

--- 10165097 ns (0.02%), 1 sample
  [ 0] G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int)
  [ 1] G1EvacuateRegionsTask::scan_roots(G1ParScanThreadState*, unsigned int)
  [ 2] G1EvacuateRegionsBaseTask::work(unsigned int)
  [ 3] GangWorker::loop()
  [ 4] GangWorker::run()
  [ 5] Thread::call_run()
  [ 6] thread_native_entry(Thread*)
  [ 7] start_thread

--- 10160962 ns (0.02%), 1 sample
  [ 0] G1PostEvacuateCollectionSetCleanupTask2::FreeCollectionSetTask::do_work(unsigned int)
  [ 1] G1BatchedGangTask::work(unsigned int)
  [ 2] GangWorker::loop()
  [ 3] GangWorker::run()
  [ 4] Thread::call_run()
  [ 5] thread_native_entry(Thread*)
  [ 6] start_thread

--- 10159085 ns (0.02%), 1 sample
  [ 0] OopMapSet::update_register_map(frame const*, RegisterMap*)
  [ 1] frame::sender_for_compiled_frame(RegisterMap*) const
  [ 2] frame::sender(RegisterMap*) const
  [ 3] JavaThread::oops_do_frames(OopClosure*, CodeBlobClosure*) [clone .part.0]
  [ 4] Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*)
  [ 5] G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int)
  [ 6] G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int)
  [ 7] G1EvacuateRegionsTask::scan_roots(G1ParScanThreadState*, unsigned int)
  [ 8] G1EvacuateRegionsBaseTask::work(unsigned int)
  [ 9] GangWorker::loop()
  [10] GangWorker::run()
  [11] Thread::call_run()
  [12] thread_native_entry(Thread*)
  [13] start_thread

--- 10158967 ns (0.02%), 1 sample
  [ 0] hash_futex_[k]
  [ 1] do_futex_[k]
  [ 2] __x64_sys_futex_[k]
  [ 3] do_syscall_64_[k]
  [ 4] entry_SYSCALL_64_after_hwframe_[k]
  [ 5] sem_post@@GLIBC_2.2.5
  [ 6] GangWorker::loop()
  [ 7] GangWorker::run()
  [ 8] Thread::call_run()
  [ 9] thread_native_entry(Thread*)
  [10] start_thread

--- 10155701 ns (0.02%), 1 sample
  [ 0] futex_wake_[k]
  [ 1] __x64_sys_futex_[k]
  [ 2] do_syscall_64_[k]
  [ 3] entry_SYSCALL_64_after_hwframe_[k]
  [ 4] __pthread_mutex_unlock_usercnt
  [ 5] [unknown]

--- 10155234 ns (0.02%), 1 sample
  [ 0] __tls_get_addr
  [ 1] GangWorker::loop()
  [ 2] GangWorker::run()
  [ 3] Thread::call_run()
  [ 4] thread_native_entry(Thread*)
  [ 5] start_thread

--- 10151832 ns (0.02%), 1 sample
  [ 0] AgeTable::AgeTable(bool)
  [ 1] G1ParScanThreadState::G1ParScanThreadState(G1CollectedHeap*, G1RedirtyCardsQueueSet*, unsigned int, unsigned int, unsigned long, unsigned long)
  [ 2] G1ParScanThreadStateSet::state_for_worker(unsigned int)
  [ 3] G1EvacuateRegionsBaseTask::work(unsigned int)
  [ 4] GangWorker::loop()
  [ 5] GangWorker::run()
  [ 6] Thread::call_run()
  [ 7] thread_native_entry(Thread*)
  [ 8] start_thread

--- 10148153 ns (0.02%), 1 sample
  [ 0] JNIHandleBlock::oops_do(OopClosure*)
  [ 1] JavaThread::oops_do_frames(OopClosure*, CodeBlobClosure*) [clone .part.0]
  [ 2] Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*)
  [ 3] G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int)
  [ 4] G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int)
  [ 5] G1EvacuateRegionsTask::scan_roots(G1ParScanThreadState*, unsigned int)
  [ 6] G1EvacuateRegionsBaseTask::work(unsigned int)
  [ 7] GangWorker::loop()
  [ 8] GangWorker::run()
  [ 9] Thread::call_run()
  [10] thread_native_entry(Thread*)
  [11] start_thread

--- 10146541 ns (0.02%), 1 sample
  [ 0] G1GCPhaseTimes::phase_name(G1GCPhaseTimes::GCParPhases)
  [ 1] G1ParEvacuateFollowersClosure::do_void()
  [ 2] G1EvacuateRegionsTask::evacuate_live_objects(G1ParScanThreadState*, unsigned int)
  [ 3] G1EvacuateRegionsBaseTask::work(unsigned int)
  [ 4] GangWorker::loop()
  [ 5] GangWorker::run()
  [ 6] Thread::call_run()
  [ 7] thread_native_entry(Thread*)
  [ 8] start_thread

--- 10143839 ns (0.02%), 1 sample
  [ 0] /usr/lib/x86_64-linux-gnu/libc-2.31.so

--- 10137893 ns (0.02%), 1 sample
  [ 0] WeakProcessorParTimeTracker::WeakProcessorParTimeTracker(WeakProcessorTimes*, OopStorageSet::WeakId, unsigned int)
  [ 1] void WeakProcessor::Task::work<G1STWIsAliveClosure, G1KeepAliveClosure>(unsigned int, G1STWIsAliveClosure*, G1KeepAliveClosure*)
  [ 2] GangWorker::loop()
  [ 3] GangWorker::run()
  [ 4] Thread::call_run()
  [ 5] thread_native_entry(Thread*)
  [ 6] start_thread

--- 10133420 ns (0.02%), 1 sample
  [ 0] __lock_text_start_[k]
  [ 1] try_to_wake_up_[k]
  [ 2] wake_up_q_[k]
  [ 3] futex_wake_[k]
  [ 4] do_futex_[k]
  [ 5] __x64_sys_futex_[k]
  [ 6] do_syscall_64_[k]
  [ 7] entry_SYSCALL_64_after_hwframe_[k]
  [ 8] sem_post@@GLIBC_2.2.5
  [ 9] GangWorker::loop()
  [10] GangWorker::run()
  [11] Thread::call_run()
  [12] thread_native_entry(Thread*)
  [13] start_thread

--- 10120868 ns (0.02%), 1 sample
  [ 0] G1CollectionSet::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int, unsigned int) const
  [ 1] G1BatchedGangTask::work(unsigned int)
  [ 2] GangWorker::loop()
  [ 3] GangWorker::run()
  [ 4] Thread::call_run()
  [ 5] thread_native_entry(Thread*)
  [ 6] start_thread

--- 10118432 ns (0.02%), 1 sample
  [ 0] CompositeElapsedCounterSource::seconds(PairRep<long, long>)
  [ 1] G1EvacuateRegionsTask::evacuate_live_objects(G1ParScanThreadState*, unsigned int)
  [ 2] G1EvacuateRegionsBaseTask::work(unsigned int)
  [ 3] GangWorker::loop()
  [ 4] GangWorker::run()
  [ 5] Thread::call_run()
  [ 6] thread_native_entry(Thread*)
  [ 7] start_thread

--- 10113543 ns (0.02%), 1 sample
  [ 0] ConstantPool::impl_signature_ref_at(int, bool)
  [ 1] JavaThread::oops_do_frames(OopClosure*, CodeBlobClosure*) [clone .part.0]
  [ 2] Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*)
  [ 3] G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int)
  [ 4] G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int)
  [ 5] G1EvacuateRegionsTask::scan_roots(G1ParScanThreadState*, unsigned int)
  [ 6] G1EvacuateRegionsBaseTask::work(unsigned int)
  [ 7] GangWorker::loop()
  [ 8] GangWorker::run()
  [ 9] Thread::call_run()
  [10] thread_native_entry(Thread*)
  [11] start_thread

--- 10113093 ns (0.02%), 1 sample
  [ 0] malloc

--- 10111623 ns (0.02%), 1 sample
  [ 0] malloc
  [ 1] G1ParScanThreadStateSet::state_for_worker(unsigned int)
  [ 2] G1EvacuateRegionsBaseTask::work(unsigned int)
  [ 3] GangWorker::loop()
  [ 4] GangWorker::run()
  [ 5] Thread::call_run()
  [ 6] thread_native_entry(Thread*)
  [ 7] start_thread

--- 10107189 ns (0.02%), 1 sample
  [ 0] G1CollectionSet::iterate_part_from(HeapRegionClosure*, HeapRegionClaimer*, unsigned long, unsigned long, unsigned int, unsigned int) const [clone .part.0]
  [ 1] G1RemSet::scan_collection_set_regions(G1ParScanThreadState*, unsigned int, G1GCPhaseTimes::GCParPhases, G1GCPhaseTimes::GCParPhases, G1GCPhaseTimes::GCParPhases)
  [ 2] G1EvacuateRegionsBaseTask::work(unsigned int)
  [ 3] GangWorker::loop()
  [ 4] GangWorker::run()
  [ 5] Thread::call_run()
  [ 6] thread_native_entry(Thread*)
  [ 7] start_thread

--- 10105358 ns (0.02%), 1 sample
  [ 0] nmethod::oops_do(OopClosure*, bool)
  [ 1] G1NmethodProcessor::do_regular_processing(nmethod*)
  [ 2] nmethod::oops_do_process_strong(nmethod::OopsDoProcessor*)
  [ 3] G1CodeBlobClosure::do_code_blob(CodeBlob*)
  [ 4] JavaThread::oops_do_frames(OopClosure*, CodeBlobClosure*) [clone .part.0]
  [ 5] Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*)
  [ 6] G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int)
  [ 7] G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int)
  [ 8] G1EvacuateRegionsTask::scan_roots(G1ParScanThreadState*, unsigned int)
  [ 9] G1EvacuateRegionsBaseTask::work(unsigned int)
  [10] GangWorker::loop()
  [11] GangWorker::run()
  [12] Thread::call_run()
  [13] thread_native_entry(Thread*)
  [14] start_thread

--- 10098493 ns (0.02%), 1 sample
  [ 0] G1MergeHeapRootsTask::G1FlushHumongousCandidateRemSets::do_heap_region(HeapRegion*)
  [ 1] G1MergeHeapRootsTask::work(unsigned int)
  [ 2] GangWorker::loop()
  [ 3] GangWorker::run()
  [ 4] Thread::call_run()
  [ 5] thread_native_entry(Thread*)
  [ 6] start_thread

--- 10098400 ns (0.02%), 1 sample
  [ 0] HeapRegionRemSet::clear_locked(bool)
  [ 1] G1CollectedHeap::free_humongous_region(HeapRegion*, FreeRegionList*)
  [ 2] G1FreeHumongousRegionClosure::do_heap_region(HeapRegion*)
  [ 3] HeapRegionManager::iterate(HeapRegionClosure*) const
  [ 4] G1PostEvacuateCollectionSetCleanupTask2::EagerlyReclaimHumongousObjectsTask::do_work(unsigned int)
  [ 5] G1BatchedGangTask::work(unsigned int)
  [ 6] GangWorker::loop()
  [ 7] GangWorker::run()
  [ 8] Thread::call_run()
  [ 9] thread_native_entry(Thread*)
  [10] start_thread

--- 10097444 ns (0.02%), 1 sample
  [ 0] SparsePRT::clear()
  [ 1] HeapRegionRemSet::clear_locked(bool)
  [ 2] HeapRegion::hr_clear(bool)
  [ 3] G1CollectedHeap::free_humongous_region(HeapRegion*, FreeRegionList*)
  [ 4] G1FreeHumongousRegionClosure::do_heap_region(HeapRegion*)
  [ 5] HeapRegionManager::iterate(HeapRegionClosure*) const
  [ 6] G1PostEvacuateCollectionSetCleanupTask2::EagerlyReclaimHumongousObjectsTask::do_work(unsigned int)
  [ 7] G1BatchedGangTask::work(unsigned int)
  [ 8] GangWorker::loop()
  [ 9] GangWorker::run()
  [10] Thread::call_run()
  [11] thread_native_entry(Thread*)
  [12] start_thread

--- 10091747 ns (0.02%), 1 sample
  [ 0] G1EvacuationRootClosures::create_root_closures(G1ParScanThreadState*, G1CollectedHeap*)
  [ 1] G1ParScanThreadState::G1ParScanThreadState(G1CollectedHeap*, G1RedirtyCardsQueueSet*, unsigned int, unsigned int, unsigned long, unsigned long)
  [ 2] G1ParScanThreadStateSet::state_for_worker(unsigned int)
  [ 3] G1EvacuateRegionsBaseTask::work(unsigned int)
  [ 4] GangWorker::loop()
  [ 5] GangWorker::run()
  [ 6] Thread::call_run()
  [ 7] thread_native_entry(Thread*)
  [ 8] start_thread

--- 10080888 ns (0.02%), 1 sample
  [ 0] G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWordImpl**, HeapWordImpl**, void const*)
  [ 1] G1ScanHRForRegionClosure::scan_heap_roots(HeapRegion*)
  [ 2] G1RemSet::scan_heap_roots(G1ParScanThreadState*, unsigned int, G1GCPhaseTimes::GCParPhases, G1GCPhaseTimes::GCParPhases, bool)
  [ 3] G1EvacuateRegionsTask::scan_roots(G1ParScanThreadState*, unsigned int)
  [ 4] G1EvacuateRegionsBaseTask::work(unsigned int)
  [ 5] GangWorker::loop()
  [ 6] GangWorker::run()
  [ 7] Thread::call_run()
  [ 8] thread_native_entry(Thread*)
  [ 9] start_thread

--- 10080021 ns (0.02%), 1 sample
  [ 0] HeapRegion::hr_clear(bool)
  [ 1] G1CollectedHeap::free_humongous_region(HeapRegion*, FreeRegionList*)
  [ 2] G1FreeHumongousRegionClosure::do_heap_region(HeapRegion*)
  [ 3] HeapRegionManager::iterate(HeapRegionClosure*) const
  [ 4] G1PostEvacuateCollectionSetCleanupTask2::EagerlyReclaimHumongousObjectsTask::do_work(unsigned int)
  [ 5] G1BatchedGangTask::work(unsigned int)
  [ 6] GangWorker::loop()
  [ 7] GangWorker::run()
  [ 8] Thread::call_run()
  [ 9] thread_native_entry(Thread*)
  [10] start_thread

--- 10075222 ns (0.02%), 1 sample
  [ 0] schedule_[k]
  [ 1] futex_wait_queue_me_[k]
  [ 2] futex_wait_[k]
  [ 3] do_futex_[k]
  [ 4] __x64_sys_futex_[k]
  [ 5] do_syscall_64_[k]
  [ 6] entry_SYSCALL_64_after_hwframe_[k]
  [ 7] pthread_cond_timedwait@@GLIBC_2.3.2
  [ 8] [unknown]

--- 10075143 ns (0.02%), 1 sample
  [ 0] GangWorker::loop()
  [ 1] GangWorker::run()
  [ 2] Thread::call_run()
  [ 3] thread_native_entry(Thread*)
  [ 4] start_thread

--- 10068852 ns (0.02%), 1 sample
  [ 0] syscall_enter_from_user_mode_[k]
  [ 1] do_syscall_64_[k]
  [ 2] entry_SYSCALL_64_after_hwframe_[k]
  [ 3] sem_post@@GLIBC_2.2.5
  [ 4] WorkGang::run_task(AbstractGangTask*, unsigned int, bool)
  [ 5] G1CollectedHeap::post_evacuate_cleanup_1(G1ParScanThreadStateSet*, G1RedirtyCardsQueueSet*)
  [ 6] G1CollectedHeap::post_evacuate_collection_set(G1EvacuationInfo&, G1RedirtyCardsQueueSet*, G1ParScanThreadStateSet*)
  [ 7] G1CollectedHeap::do_collection_pause_at_safepoint_helper(double)
  [ 8] G1CollectedHeap::do_collection_pause_at_safepoint(double)
  [ 9] VM_G1TryInitiateConcMark::doit()
  [10] VM_Operation::evaluate()
  [11] VMThread::evaluate_operation(VM_Operation*)
  [12] VMThread::inner_execute(VM_Operation*)
  [13] VMThread::run()
  [14] Thread::call_run()
  [15] thread_native_entry(Thread*)
  [16] start_thread

--- 10067104 ns (0.02%), 1 sample
  [ 0] G1GCParPhaseTimesTracker::G1GCParPhaseTimesTracker(G1GCPhaseTimes*, G1GCPhaseTimes::GCParPhases, unsigned int, bool)
  [ 1] G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int)
  [ 2] G1EvacuateRegionsTask::scan_roots(G1ParScanThreadState*, unsigned int)
  [ 3] G1EvacuateRegionsBaseTask::work(unsigned int)
  [ 4] GangWorker::loop()
  [ 5] GangWorker::run()
  [ 6] Thread::call_run()
  [ 7] thread_native_entry(Thread*)
  [ 8] start_thread

--- 10061341 ns (0.02%), 1 sample
  [ 0] TaskTerminator::offer_termination(TerminatorTerminator*)
  [ 1] G1ParEvacuateFollowersClosure::do_void()
  [ 2] G1EvacuateRegionsTask::evacuate_live_objects(G1ParScanThreadState*, unsigned int)
  [ 3] G1EvacuateRegionsBaseTask::work(unsigned int)
  [ 4] GangWorker::loop()
  [ 5] GangWorker::run()
  [ 6] Thread::call_run()
  [ 7] thread_native_entry(Thread*)
  [ 8] start_thread

--- 10052313 ns (0.02%), 1 sample
  [ 0] /usr/lib/x86_64-linux-gnu/libc-2.31.so
  [ 1] CollectedHeap::set_gc_cause(GCCause::Cause)
  [ 2] VM_G1TryInitiateConcMark::doit()
  [ 3] VM_Operation::evaluate()
  [ 4] VMThread::evaluate_operation(VM_Operation*)
  [ 5] VMThread::inner_execute(VM_Operation*)
  [ 6] VMThread::run()
  [ 7] Thread::call_run()
  [ 8] thread_native_entry(Thread*)
  [ 9] start_thread

--- 10049105 ns (0.02%), 1 sample
  [ 0] GCMemoryManager::gc_begin(bool, bool, bool)
  [ 1] TraceMemoryManagerStats::TraceMemoryManagerStats(GCMemoryManager*, GCCause::Cause, bool, bool, bool, bool, bool, bool, bool, bool)
  [ 2] G1MonitoringScope::G1MonitoringScope(G1MonitoringSupport*, bool, bool)
  [ 3] G1CollectedHeap::do_collection_pause_at_safepoint_helper(double)
  [ 4] G1CollectedHeap::do_collection_pause_at_safepoint(double)
  [ 5] VM_G1TryInitiateConcMark::doit()
  [ 6] VM_Operation::evaluate()
  [ 7] VMThread::evaluate_operation(VM_Operation*)
  [ 8] VMThread::inner_execute(VM_Operation*)
  [ 9] VMThread::run()
  [10] Thread::call_run()
  [11] thread_native_entry(Thread*)
  [12] start_thread

--- 10049038 ns (0.02%), 1 sample
  [ 0] __lock_text_start_[k]
  [ 1] try_to_wake_up_[k]
  [ 2] wake_up_q_[k]
  [ 3] futex_wake_[k]
  [ 4] do_futex_[k]
  [ 5] __x64_sys_futex_[k]
  [ 6] do_syscall_64_[k]
  [ 7] entry_SYSCALL_64_after_hwframe_[k]
  [ 8] sem_post@@GLIBC_2.2.5
  [ 9] WorkGang::run_task(AbstractGangTask*, unsigned int, bool)
  [10] G1CollectedHeap::post_evacuate_cleanup_2(PreservedMarksSet*, G1RedirtyCardsQueueSet*, G1EvacuationInfo*, unsigned long const*)
  [11] G1CollectedHeap::post_evacuate_collection_set(G1EvacuationInfo&, G1RedirtyCardsQueueSet*, G1ParScanThreadStateSet*)
  [12] G1CollectedHeap::do_collection_pause_at_safepoint_helper(double)
  [13] G1CollectedHeap::do_collection_pause_at_safepoint(double)
  [14] VM_G1TryInitiateConcMark::doit()
  [15] VM_Operation::evaluate()
  [16] VMThread::evaluate_operation(VM_Operation*)
  [17] VMThread::inner_execute(VM_Operation*)
  [18] VMThread::run()
  [19] Thread::call_run()
  [20] thread_native_entry(Thread*)
  [21] start_thread

--- 10048880 ns (0.02%), 1 sample
  [ 0] VM_G1TryInitiateConcMark::doit()
  [ 1] VMThread::evaluate_operation(VM_Operation*)
  [ 2] VMThread::inner_execute(VM_Operation*)
  [ 3] VMThread::run()
  [ 4] Thread::call_run()
  [ 5] thread_native_entry(Thread*)
  [ 6] start_thread

--- 10048393 ns (0.02%), 1 sample
  [ 0] OopStorage::BasicParState::BasicParState(OopStorage const*, unsigned int, bool)
  [ 1] WeakProcessor::Task::Task(WeakProcessorTimes*, unsigned int)
  [ 2] void WeakProcessor::weak_oops_do<G1STWIsAliveClosure, G1KeepAliveClosure>(WorkGang*, G1STWIsAliveClosure*, G1KeepAliveClosure*, WeakProcessorTimes*)
  [ 3] G1CollectedHeap::post_evacuate_collection_set(G1EvacuationInfo&, G1RedirtyCardsQueueSet*, G1ParScanThreadStateSet*)
  [ 4] G1CollectedHeap::do_collection_pause_at_safepoint_helper(double)
  [ 5] G1CollectedHeap::do_collection_pause_at_safepoint(double)
  [ 6] VM_G1TryInitiateConcMark::doit()
  [ 7] VM_Operation::evaluate()
  [ 8] VMThread::evaluate_operation(VM_Operation*)
  [ 9] VMThread::inner_execute(VM_Operation*)
  [10] VMThread::run()
  [11] Thread::call_run()
  [12] thread_native_entry(Thread*)
  [13] start_thread

--- 10048038 ns (0.02%), 1 sample
  [ 0] G1FromCardCache::clear(unsigned int)
  [ 1] HeapRegionRemSet::clear_locked(bool)
  [ 2] HeapRegion::hr_clear(bool)
  [ 3] G1CollectedHeap::free_humongous_region(HeapRegion*, FreeRegionList*)
  [ 4] G1FreeHumongousRegionClosure::do_heap_region(HeapRegion*)
  [ 5] HeapRegionManager::iterate(HeapRegionClosure*) const
  [ 6] G1PostEvacuateCollectionSetCleanupTask2::EagerlyReclaimHumongousObjectsTask::do_work(unsigned int)
  [ 7] G1BatchedGangTask::work(unsigned int)
  [ 8] GangWorker::loop()
  [ 9] GangWorker::run()
  [10] Thread::call_run()
  [11] thread_native_entry(Thread*)
  [12] start_thread

--- 10047911 ns (0.02%), 1 sample
  [ 0] TruncatedSeq::add(double)
  [ 1] G1PostEvacuateCollectionSetCleanupTask2::FreeCollectionSetTask::report_statistics()
  [ 2] G1PostEvacuateCollectionSetCleanupTask2::FreeCollectionSetTask::~FreeCollectionSetTask()
  [ 3] G1PostEvacuateCollectionSetCleanupTask2::FreeCollectionSetTask::~FreeCollectionSetTask()
  [ 4] G1BatchedGangTask::~G1BatchedGangTask()
  [ 5] G1CollectedHeap::post_evacuate_cleanup_2(PreservedMarksSet*, G1RedirtyCardsQueueSet*, G1EvacuationInfo*, unsigned long const*)
  [ 6] G1CollectedHeap::post_evacuate_collection_set(G1EvacuationInfo&, G1RedirtyCardsQueueSet*, G1ParScanThreadStateSet*)
  [ 7] G1CollectedHeap::do_collection_pause_at_safepoint_helper(double)
  [ 8] G1CollectedHeap::do_collection_pause_at_safepoint(double)
  [ 9] VM_G1TryInitiateConcMark::doit()
  [10] VM_Operation::evaluate()
  [11] VMThread::evaluate_operation(VM_Operation*)
  [12] VMThread::inner_execute(VM_Operation*)
  [13] VMThread::run()
  [14] Thread::call_run()
  [15] thread_native_entry(Thread*)
  [16] start_thread

--- 10046845 ns (0.02%), 1 sample
  [ 0] GCTracer::send_reference_stats_event(ReferenceType, unsigned long) const
  [ 1] GCTracer::report_gc_reference_stats(ReferenceProcessorStats const&) const
  [ 2] G1CollectedHeap::process_discovered_references(G1ParScanThreadStateSet*)
  [ 3] G1CollectedHeap::post_evacuate_collection_set(G1EvacuationInfo&, G1RedirtyCardsQueueSet*, G1ParScanThreadStateSet*)
  [ 4] G1CollectedHeap::do_collection_pause_at_safepoint_helper(double)
  [ 5] G1CollectedHeap::do_collection_pause_at_safepoint(double)
  [ 6] VM_G1TryInitiateConcMark::doit()
  [ 7] VM_Operation::evaluate()
  [ 8] VMThread::evaluate_operation(VM_Operation*)
  [ 9] VMThread::inner_execute(VM_Operation*)
  [10] VMThread::run()
  [11] Thread::call_run()
  [12] thread_native_entry(Thread*)
  [13] start_thread

--- 10046446 ns (0.02%), 1 sample
  [ 0] HeapRegionManager::iterate(HeapRegionClosure*) const
  [ 1] G1MergeHeapRootsTask::work(unsigned int)
  [ 2] GangWorker::loop()
  [ 3] GangWorker::run()
  [ 4] Thread::call_run()
  [ 5] thread_native_entry(Thread*)
  [ 6] start_thread

--- 10044593 ns (0.02%), 1 sample
  [ 0] get_futex_key_[k]
  [ 1] futex_wake_[k]
  [ 2] do_futex_[k]
  [ 3] __x64_sys_futex_[k]
  [ 4] do_syscall_64_[k]
  [ 5] entry_SYSCALL_64_after_hwframe_[k]
  [ 6] sem_post@@GLIBC_2.2.5
  [ 7] WorkGang::run_task(AbstractGangTask*, unsigned int, bool)
  [ 8] G1RemSet::merge_heap_roots(bool)
  [ 9] G1CollectedHeap::evacuate_initial_collection_set(G1ParScanThreadStateSet*, bool)
  [10] G1CollectedHeap::do_collection_pause_at_safepoint_helper(double)
  [11] G1CollectedHeap::do_collection_pause_at_safepoint(double)
  [12] VM_G1TryInitiateConcMark::doit()
  [13] VM_Operation::evaluate()
  [14] VMThread::evaluate_operation(VM_Operation*)
  [15] VMThread::inner_execute(VM_Operation*)
  [16] VMThread::run()
  [17] Thread::call_run()
  [18] thread_native_entry(Thread*)
  [19] start_thread

--- 10043991 ns (0.02%), 1 sample
  [ 0] update_blocked_averages_[k]
  [ 1] run_rebalance_domains_[k]
  [ 2] __softirqentry_text_start_[k]
  [ 3] irq_exit_rcu_[k]
  [ 4] sysvec_apic_timer_interrupt_[k]
  [ 5] asm_sysvec_apic_timer_interrupt_[k]
  [ 6] pthread_cond_timedwait@@GLIBC_2.3.2
  [ 7] [unknown]

--- 10043131 ns (0.02%), 1 sample
  [ 0] __lock_text_start_[k]
  [ 1] try_to_wake_up_[k]
  [ 2] wake_up_q_[k]
  [ 3] futex_wake_[k]
  [ 4] do_futex_[k]
  [ 5] __x64_sys_futex_[k]
  [ 6] do_syscall_64_[k]
  [ 7] entry_SYSCALL_64_after_hwframe_[k]
  [ 8] sem_post@@GLIBC_2.2.5
  [ 9] WorkGang::run_task(AbstractGangTask*, unsigned int, bool)
  [10] void WeakProcessor::weak_oops_do<G1STWIsAliveClosure, G1KeepAliveClosure>(WorkGang*, G1STWIsAliveClosure*, G1KeepAliveClosure*, WeakProcessorTimes*)
  [11] G1CollectedHeap::post_evacuate_collection_set(G1EvacuationInfo&, G1RedirtyCardsQueueSet*, G1ParScanThreadStateSet*)
  [12] G1CollectedHeap::do_collection_pause_at_safepoint_helper(double)
  [13] G1CollectedHeap::do_collection_pause_at_safepoint(double)
  [14] VM_G1TryInitiateConcMark::doit()
  [15] VM_Operation::evaluate()
  [16] VMThread::evaluate_operation(VM_Operation*)
  [17] VMThread::inner_execute(VM_Operation*)
  [18] VMThread::run()
  [19] Thread::call_run()
  [20] thread_native_entry(Thread*)
  [21] start_thread

--- 10041660 ns (0.02%), 1 sample
  [ 0] outputStream::do_vsnprintf_and_write_with_automatic_buffer(char const*, __va_list_tag*, bool)
  [ 1] outputStream::print_cr(char const*, ...)
  [ 2] ReferenceProcessorPhaseTimes::print_phase(ReferenceProcessor::RefProcPhases, unsigned int) const
  [ 3] ReferenceProcessorPhaseTimes::print_all_references(unsigned int, bool) const
  [ 4] G1GCPhaseTimes::print_post_evacuate_collection_set() const
  [ 5] G1GCPhaseTimes::print()
  [ 6] G1CollectedHeap::do_collection_pause_at_safepoint_helper(double)
  [ 7] G1CollectedHeap::do_collection_pause_at_safepoint(double)
  [ 8] VM_G1TryInitiateConcMark::doit()
  [ 9] VM_Operation::evaluate()
  [10] VMThread::evaluate_operation(VM_Operation*)
  [11] VMThread::inner_execute(VM_Operation*)
  [12] VMThread::run()
  [13] Thread::call_run()
  [14] thread_native_entry(Thread*)
  [15] start_thread

--- 10039503 ns (0.02%), 1 sample
  [ 0] MemoryPool::record_peak_memory_usage()
  [ 1] TraceMemoryManagerStats::TraceMemoryManagerStats(GCMemoryManager*, GCCause::Cause, bool, bool, bool, bool, bool, bool, bool, bool)
  [ 2] G1MonitoringScope::G1MonitoringScope(G1MonitoringSupport*, bool, bool)
  [ 3] G1CollectedHeap::do_collection_pause_at_safepoint_helper(double)
  [ 4] G1CollectedHeap::do_collection_pause_at_safepoint(double)
  [ 5] VM_G1TryInitiateConcMark::doit()
  [ 6] VM_Operation::evaluate()
  [ 7] VMThread::evaluate_operation(VM_Operation*)
  [ 8] VMThread::inner_execute(VM_Operation*)
  [ 9] VMThread::run()
  [10] Thread::call_run()
  [11] thread_native_entry(Thread*)
  [12] start_thread

--- 10039170 ns (0.02%), 1 sample
  [ 0] G1RegionMarkStatsCache::reset()
  [ 1] G1ConcurrentMark::pre_concurrent_start(GCCause::Cause)
  [ 2] G1CollectedHeap::pre_evacuate_collection_set(G1EvacuationInfo&, G1ParScanThreadStateSet*)
  [ 3] G1CollectedHeap::do_collection_pause_at_safepoint_helper(double)
  [ 4] G1CollectedHeap::do_collection_pause_at_safepoint(double)
  [ 5] VM_G1TryInitiateConcMark::doit()
  [ 6] VM_Operation::evaluate()
  [ 7] VMThread::evaluate_operation(VM_Operation*)
  [ 8] VMThread::inner_execute(VM_Operation*)
  [ 9] VMThread::run()
  [10] Thread::call_run()
  [11] thread_native_entry(Thread*)
  [12] start_thread

--- 10039020 ns (0.02%), 1 sample
  [ 0] get_futex_key_[k]
  [ 1] futex_wake_[k]
  [ 2] do_futex_[k]
  [ 3] __x64_sys_futex_[k]
  [ 4] do_syscall_64_[k]
  [ 5] entry_SYSCALL_64_after_hwframe_[k]
  [ 6] sem_post@@GLIBC_2.2.5
  [ 7] WorkGang::run_task(AbstractGangTask*, unsigned int, bool)
  [ 8] G1CollectedHeap::post_evacuate_cleanup_2(PreservedMarksSet*, G1RedirtyCardsQueueSet*, G1EvacuationInfo*, unsigned long const*)
  [ 9] G1CollectedHeap::post_evacuate_collection_set(G1EvacuationInfo&, G1RedirtyCardsQueueSet*, G1ParScanThreadStateSet*)
  [10] G1CollectedHeap::do_collection_pause_at_safepoint_helper(double)
  [11] G1CollectedHeap::do_collection_pause_at_safepoint(double)
  [12] VM_G1TryInitiateConcMark::doit()
  [13] VM_Operation::evaluate()
  [14] VMThread::evaluate_operation(VM_Operation*)
  [15] VMThread::inner_execute(VM_Operation*)
  [16] VMThread::run()
  [17] Thread::call_run()
  [18] thread_native_entry(Thread*)
  [19] start_thread

--- 10038733 ns (0.02%), 1 sample
  [ 0] syscall_enter_from_user_mode_[k]
  [ 1] do_syscall_64_[k]
  [ 2] entry_SYSCALL_64_after_hwframe_[k]
  [ 3] sem_post@@GLIBC_2.2.5
  [ 4] WorkGang::run_task(AbstractGangTask*, unsigned int, bool)
  [ 5] G1CollectedHeap::pre_evacuate_collection_set(G1EvacuationInfo&, G1ParScanThreadStateSet*)
  [ 6] G1CollectedHeap::do_collection_pause_at_safepoint_helper(double)
  [ 7] G1CollectedHeap::do_collection_pause_at_safepoint(double)
  [ 8] VM_G1TryInitiateConcMark::doit()
  [ 9] VM_Operation::evaluate()
  [10] VMThread::evaluate_operation(VM_Operation*)
  [11] VMThread::inner_execute(VM_Operation*)
  [12] VMThread::run()
  [13] Thread::call_run()
  [14] thread_native_entry(Thread*)
  [15] start_thread

--- 10037857 ns (0.02%), 1 sample
  [ 0] __lock_text_start_[k]
  [ 1] try_to_wake_up_[k]
  [ 2] wake_up_q_[k]
  [ 3] futex_wake_[k]
  [ 4] do_futex_[k]
  [ 5] __x64_sys_futex_[k]
  [ 6] do_syscall_64_[k]
  [ 7] entry_SYSCALL_64_after_hwframe_[k]
  [ 8] sem_post@@GLIBC_2.2.5
  [ 9] WorkGang::run_task(AbstractGangTask*, unsigned int, bool)
  [10] G1RemSet::merge_heap_roots(bool)
  [11] G1CollectedHeap::evacuate_initial_collection_set(G1ParScanThreadStateSet*, bool)
  [12] G1CollectedHeap::do_collection_pause_at_safepoint_helper(double)
  [13] G1CollectedHeap::do_collection_pause_at_safepoint(double)
  [14] VM_G1TryInitiateConcMark::doit()
  [15] VM_Operation::evaluate()
  [16] VMThread::evaluate_operation(VM_Operation*)
  [17] VMThread::inner_execute(VM_Operation*)
  [18] VMThread::run()
  [19] Thread::call_run()
  [20] thread_native_entry(Thread*)
  [21] start_thread

--- 10037814 ns (0.02%), 1 sample
  [ 0] VMThread::is_VM_thread() const
  [ 1] G1Allocator::reuse_retained_old_region(G1EvacuationInfo&, OldGCAllocRegion*, HeapRegion**)
  [ 2] G1CollectedHeap::pre_evacuate_collection_set(G1EvacuationInfo&, G1ParScanThreadStateSet*)
  [ 3] G1CollectedHeap::do_collection_pause_at_safepoint_helper(double)
  [ 4] G1CollectedHeap::do_collection_pause_at_safepoint(double)
  [ 5] VM_G1TryInitiateConcMark::doit()
  [ 6] VM_Operation::evaluate()
  [ 7] VMThread::evaluate_operation(VM_Operation*)
  [ 8] VMThread::inner_execute(VM_Operation*)
  [ 9] VMThread::run()
  [10] Thread::call_run()
  [11] thread_native_entry(Thread*)
  [12] start_thread

--- 10037136 ns (0.02%), 1 sample
  [ 0] __lock_text_start_[k]
  [ 1] try_to_wake_up_[k]
  [ 2] wake_up_q_[k]
  [ 3] futex_wake_[k]
  [ 4] do_futex_[k]
  [ 5] __x64_sys_futex_[k]
  [ 6] do_syscall_64_[k]
  [ 7] entry_SYSCALL_64_after_hwframe_[k]
  [ 8] sem_post@@GLIBC_2.2.5
  [ 9] WorkGang::run_task(AbstractGangTask*, unsigned int, bool)
  [10] HeapRegionManager::rebuild_free_list(WorkGang*)
  [11] G1CollectedHeap::post_evacuate_collection_set(G1EvacuationInfo&, G1RedirtyCardsQueueSet*, G1ParScanThreadStateSet*)
  [12] G1CollectedHeap::do_collection_pause_at_safepoint_helper(double)
  [13] G1CollectedHeap::do_collection_pause_at_safepoint(double)
  [14] VM_G1TryInitiateConcMark::doit()
  [15] VM_Operation::evaluate()
  [16] VMThread::evaluate_operation(VM_Operation*)
  [17] VMThread::inner_execute(VM_Operation*)
  [18] VMThread::run()
  [19] Thread::call_run()
  [20] thread_native_entry(Thread*)
  [21] start_thread

--- 10036770 ns (0.02%), 1 sample
  [ 0] stringStream::write(char const*, unsigned long)
  [ 1] outputStream::do_vsnprintf_and_write_with_automatic_buffer(char const*, __va_list_tag*, bool)
  [ 2] outputStream::print_cr(char const*, ...)
  [ 3] GCHeapLog::log_heap(CollectedHeap*, bool) [clone .part.0]
  [ 4] G1CollectedHeap::do_collection_pause_at_safepoint_helper(double)
  [ 5] G1CollectedHeap::do_collection_pause_at_safepoint(double)
  [ 6] VM_G1TryInitiateConcMark::doit()
  [ 7] VM_Operation::evaluate()
  [ 8] VMThread::evaluate_operation(VM_Operation*)
  [ 9] VMThread::inner_execute(VM_Operation*)
  [10] VMThread::run()
  [11] Thread::call_run()
  [12] thread_native_entry(Thread*)
  [13] start_thread

--- 10032921 ns (0.02%), 1 sample
  [ 0] G1CardTable::is_in_young(oopDesc*) const
  [ 1] JVMCIRuntime::new_instance_common(JavaThread*, Klass*, bool)
  [ 2] kr.sanchez.specdeser.core.jakarta.FallbackParser.<init>
  [ 3] kr.sanchez.specdeser.benchmark.SpeculativeBenchmark.parserSpeculativeRegular
  [ 4] kr.sanchez.specdeser.benchmark.jmh_generated.SpeculativeBenchmark_parserSpeculativeRegular_jmhTest.parserSpeculativeRegular_thrpt_jmhStub
  [ 5] kr.sanchez.specdeser.benchmark.jmh_generated.SpeculativeBenchmark_parserSpeculativeRegular_jmhTest.parserSpeculativeRegular_Throughput
  [ 6] jdk.internal.reflect.GeneratedMethodAccessor3.invoke
  [ 7] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 8] java.lang.reflect.Method.invoke
  [ 9] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [10] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [11] java.util.concurrent.FutureTask.run
  [12] java.util.concurrent.Executors$RunnableAdapter.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.ThreadPoolExecutor.runWorker
  [15] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [16] java.lang.Thread.run

--- 10015177 ns (0.02%), 1 sample
  [ 0] __lock_text_start_[k]
  [ 1] note_gp_changes_[k]
  [ 2] rcu_core_[k]
  [ 3] rcu_core_si_[k]
  [ 4] __softirqentry_text_start_[k]
  [ 5] irq_exit_rcu_[k]
  [ 6] sysvec_apic_timer_interrupt_[k]
  [ 7] asm_sysvec_apic_timer_interrupt_[k]
  [ 8] /usr/lib/x86_64-linux-gnu/libc-2.31.so
  [ 9] MarkBitMap::do_clear(MemRegion, bool)
  [10] G1ClearBitMapTask::G1ClearBitmapHRClosure::do_heap_region(HeapRegion*)
  [11] HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const
  [12] G1ClearBitMapTask::work(unsigned int)
  [13] GangWorker::loop()
  [14] GangWorker::run()
  [15] Thread::call_run()
  [16] thread_native_entry(Thread*)
  [17] start_thread

--- 10013787 ns (0.02%), 1 sample
  [ 0] org.graalvm.compiler.graph.iterators.FilteredNodeIterable.iterator
  [ 1] org.graalvm.compiler.nodes.cfg.ControlFlowGraph.calculateLocalLoopFrequency
  [ 2] org.graalvm.compiler.nodes.cfg.ControlFlowGraph.finishLocalLoopFrequency
  [ 3] org.graalvm.compiler.nodes.cfg.ControlFlowGraph.lambda$computeLocalLoopFrequencies$3
  [ 4] org.graalvm.compiler.nodes.cfg.ControlFlowGraph$$Lambda$66.0x0000000800de15c0.accept
  [ 5] org.graalvm.compiler.nodes.cfg.ControlFlowGraph.rpoInnerLoopsFirst
  [ 6] org.graalvm.compiler.nodes.cfg.ControlFlowGraph.computeLocalLoopFrequencies
  [ 7] org.graalvm.compiler.nodes.cfg.ControlFlowGraph.computeFrequencies
  [ 8] org.graalvm.compiler.nodes.cfg.ControlFlowGraph.compute
  [ 9] org.graalvm.compiler.phases.schedule.SchedulePhase$Instance.run
  [10] org.graalvm.compiler.phases.schedule.SchedulePhase.run
  [11] org.graalvm.compiler.phases.schedule.SchedulePhase.run
  [12] org.graalvm.compiler.phases.BasePhase.apply
  [13] org.graalvm.compiler.phases.BasePhase.apply
  [14] org.graalvm.compiler.phases.common.LoweringPhase.lower
  [15] org.graalvm.compiler.phases.common.LoweringPhase.run
  [16] org.graalvm.compiler.phases.common.LoweringPhase.run
  [17] org.graalvm.compiler.phases.BasePhase.apply
  [18] org.graalvm.compiler.phases.BasePhase.apply
  [19] org.graalvm.compiler.phases.PhaseSuite.run
  [20] org.graalvm.compiler.phases.BasePhase.apply
  [21] org.graalvm.compiler.phases.BasePhase.apply
  [22] org.graalvm.compiler.core.GraalCompiler.emitFrontEnd
  [23] org.graalvm.compiler.core.GraalCompiler.compile
  [24] org.graalvm.compiler.core.GraalCompiler.compileGraph
  [25] org.graalvm.compiler.hotspot.HotSpotGraalCompiler.compileHelper
  [26] org.graalvm.compiler.hotspot.HotSpotGraalCompiler.compile
  [27] org.graalvm.compiler.hotspot.CompilationTask$HotSpotCompilationWrapper.performCompilation
  [28] org.graalvm.compiler.hotspot.CompilationTask$HotSpotCompilationWrapper.performCompilation
  [29] org.graalvm.compiler.core.CompilationWrapper.run
  [30] org.graalvm.compiler.hotspot.CompilationTask.runCompilation
  [31] org.graalvm.compiler.hotspot.HotSpotGraalCompiler.compileMethod
  [32] org.graalvm.compiler.hotspot.HotSpotGraalCompiler.compileMethod
  [33] org.graalvm.compiler.hotspot.HotSpotGraalCompiler.compileMethod
  [34] jdk.vm.ci.hotspot.HotSpotJVMCIRuntime.compileMethod

--- 10013263 ns (0.02%), 1 sample
  [ 0] java.util.ArrayList.add
  [ 1] java.util.ArrayList.add
  [ 2] org.graalvm.compiler.nodes.cfg.ReversePostOrder.assignPredecessorsAndSuccessors
  [ 3] org.graalvm.compiler.nodes.cfg.ReversePostOrder.identifyBlocks
  [ 4] org.graalvm.compiler.nodes.cfg.ControlFlowGraph.identifyBlocks
  [ 5] org.graalvm.compiler.nodes.cfg.ControlFlowGraph.compute
  [ 6] org.graalvm.compiler.phases.schedule.SchedulePhase$Instance.run
  [ 7] org.graalvm.compiler.phases.schedule.SchedulePhase.run
  [ 8] org.graalvm.compiler.phases.schedule.SchedulePhase.run
  [ 9] org.graalvm.compiler.phases.BasePhase.apply
  [10] org.graalvm.compiler.phases.BasePhase.apply
  [11] org.graalvm.compiler.phases.PhaseSuite.run
  [12] org.graalvm.compiler.phases.BasePhase.apply
  [13] org.graalvm.compiler.phases.BasePhase.apply
  [14] org.graalvm.compiler.core.GraalCompiler.emitFrontEnd
  [15] org.graalvm.compiler.core.GraalCompiler.compile
  [16] org.graalvm.compiler.core.GraalCompiler.compileGraph
  [17] org.graalvm.compiler.hotspot.HotSpotGraalCompiler.compileHelper
  [18] org.graalvm.compiler.hotspot.HotSpotGraalCompiler.compile
  [19] org.graalvm.compiler.hotspot.CompilationTask$HotSpotCompilationWrapper.performCompilation
  [20] org.graalvm.compiler.hotspot.CompilationTask$HotSpotCompilationWrapper.performCompilation
  [21] org.graalvm.compiler.core.CompilationWrapper.run
  [22] org.graalvm.compiler.hotspot.CompilationTask.runCompilation
  [23] org.graalvm.compiler.hotspot.HotSpotGraalCompiler.compileMethod
  [24] org.graalvm.compiler.hotspot.HotSpotGraalCompiler.compileMethod
  [25] org.graalvm.compiler.hotspot.HotSpotGraalCompiler.compileMethod
  [26] jdk.vm.ci.hotspot.HotSpotJVMCIRuntime.compileMethod

--- 10011681 ns (0.02%), 1 sample
  [ 0] org.graalvm.compiler.phases.common.inlining.walker.CallsiteHolderExplorable.<init>
  [ 1] org.graalvm.compiler.phases.common.inlining.walker.MethodInvocation.buildCallsiteHolderForElement
  [ 2] org.graalvm.compiler.phases.common.inlining.walker.InliningData.pushInvocationAndGraphs
  [ 3] org.graalvm.compiler.phases.common.inlining.walker.InliningData.processNextInvoke
  [ 4] org.graalvm.compiler.phases.common.inlining.walker.InliningData.moveForward
  [ 5] org.graalvm.compiler.phases.common.inlining.InliningPhase.run
  [ 6] org.graalvm.compiler.phases.common.inlining.InliningPhase.run
  [ 7] org.graalvm.compiler.phases.BasePhase.apply
  [ 8] org.graalvm.compiler.phases.BasePhase.apply
  [ 9] org.graalvm.compiler.phases.PhaseSuite.run
  [10] org.graalvm.compiler.phases.BasePhase.apply
  [11] org.graalvm.compiler.phases.BasePhase.apply
  [12] org.graalvm.compiler.core.GraalCompiler.emitFrontEnd
  [13] org.graalvm.compiler.core.GraalCompiler.compile
  [14] org.graalvm.compiler.core.GraalCompiler.compileGraph
  [15] org.graalvm.compiler.hotspot.HotSpotGraalCompiler.compileHelper
  [16] org.graalvm.compiler.hotspot.HotSpotGraalCompiler.compile
  [17] org.graalvm.compiler.hotspot.CompilationTask$HotSpotCompilationWrapper.performCompilation
  [18] org.graalvm.compiler.hotspot.CompilationTask$HotSpotCompilationWrapper.performCompilation
  [19] org.graalvm.compiler.core.CompilationWrapper.run
  [20] org.graalvm.compiler.hotspot.CompilationTask.runCompilation
  [21] org.graalvm.compiler.hotspot.HotSpotGraalCompiler.compileMethod
  [22] org.graalvm.compiler.hotspot.HotSpotGraalCompiler.compileMethod
  [23] org.graalvm.compiler.hotspot.HotSpotGraalCompiler.compileMethod
  [24] jdk.vm.ci.hotspot.HotSpotJVMCIRuntime.compileMethod

--- 10011581 ns (0.02%), 1 sample
  [ 0] BitMap::clear_range(unsigned long, unsigned long)
  [ 1] MarkBitMap::do_clear(MemRegion, bool)
  [ 2] G1ClearBitMapTask::G1ClearBitmapHRClosure::do_heap_region(HeapRegion*)
  [ 3] HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const
  [ 4] G1ClearBitMapTask::work(unsigned int)
  [ 5] GangWorker::loop()
  [ 6] GangWorker::run()
  [ 7] Thread::call_run()
  [ 8] thread_native_entry(Thread*)
  [ 9] start_thread

--- 10010987 ns (0.02%), 1 sample
  [ 0] G1ClearBitMapTask::G1ClearBitmapHRClosure::do_heap_region(HeapRegion*)
  [ 1] HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const
  [ 2] G1ClearBitMapTask::work(unsigned int)
  [ 3] GangWorker::loop()
  [ 4] GangWorker::run()
  [ 5] Thread::call_run()
  [ 6] thread_native_entry(Thread*)
  [ 7] start_thread

--- 10005320 ns (0.02%), 1 sample
  [ 0] G1Policy::preventive_collection_required(unsigned int)
  [ 1] G1CollectedHeap::attempt_allocation_slow(unsigned long)
  [ 2] G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*)
  [ 3] MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&) const
  [ 4] MemAllocator::allocate() const
  [ 5] InstanceKlass::allocate_instance(JavaThread*)
  [ 6] JVMCIRuntime::new_instance_common(JavaThread*, Klass*, bool)
  [ 7] kr.sanchez.specdeser.core.jakarta.FallbackParser.<init>
  [ 8] kr.sanchez.specdeser.benchmark.SpeculativeBenchmark.parserSpeculativeRegular
  [ 9] kr.sanchez.specdeser.benchmark.jmh_generated.SpeculativeBenchmark_parserSpeculativeRegular_jmhTest.parserSpeculativeRegular_thrpt_jmhStub
  [10] kr.sanchez.specdeser.benchmark.jmh_generated.SpeculativeBenchmark_parserSpeculativeRegular_jmhTest.parserSpeculativeRegular_Throughput
  [11] jdk.internal.reflect.GeneratedMethodAccessor3.invoke
  [12] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [13] java.lang.reflect.Method.invoke
  [14] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [15] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [16] java.util.concurrent.FutureTask.run
  [17] java.util.concurrent.Executors$RunnableAdapter.call
  [18] java.util.concurrent.FutureTask.run
  [19] java.util.concurrent.ThreadPoolExecutor.runWorker
  [20] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [21] java.lang.Thread.run

--- 10003816 ns (0.02%), 1 sample
  [ 0] org.graalvm.compiler.graph.Edges.getNodeUnsafe
  [ 1] org.graalvm.compiler.graph.NodeClass$RawEdgesIterator.getInput
  [ 2] org.graalvm.compiler.graph.NodeClass$RawEdgesIterator.forward
  [ 3] org.graalvm.compiler.graph.NodeClass$RawEdgesIterator.hasNext
  [ 4] org.graalvm.compiler.phases.common.inlining.walker.ComputeInliningRelevance.getMaxProbabilitySux
  [ 5] org.graalvm.compiler.phases.common.inlining.walker.ComputeInliningRelevance.computeFastPathMinProbability
  [ 6] org.graalvm.compiler.phases.common.inlining.walker.ComputeInliningRelevance$Scope.getFastPathMinProbability
  [ 7] org.graalvm.compiler.phases.common.inlining.walker.ComputeInliningRelevance$Scope.computeInvokeRelevance
  [ 8] org.graalvm.compiler.phases.common.inlining.walker.ComputeInliningRelevance$Scope.process
  [ 9] org.graalvm.compiler.phases.common.inlining.walker.ComputeInliningRelevance.compute
  [10] org.graalvm.compiler.phases.common.inlining.walker.CallsiteHolderExplorable.computeProbabilities
  [11] org.graalvm.compiler.phases.common.inlining.walker.InliningData.doInline
  [12] org.graalvm.compiler.phases.common.inlining.walker.InliningData.tryToInline
  [13] org.graalvm.compiler.phases.common.inlining.walker.InliningData.moveForward
  [14] org.graalvm.compiler.phases.common.inlining.InliningPhase.run
  [15] org.graalvm.compiler.phases.common.inlining.InliningPhase.run
  [16] org.graalvm.compiler.phases.BasePhase.apply
  [17] org.graalvm.compiler.phases.BasePhase.apply
  [18] org.graalvm.compiler.phases.PhaseSuite.run
  [19] org.graalvm.compiler.phases.BasePhase.apply
  [20] org.graalvm.compiler.phases.BasePhase.apply
  [21] org.graalvm.compiler.core.GraalCompiler.emitFrontEnd
  [22] org.graalvm.compiler.core.GraalCompiler.compile
  [23] org.graalvm.compiler.core.GraalCompiler.compileGraph
  [24] org.graalvm.compiler.hotspot.HotSpotGraalCompiler.compileHelper
  [25] org.graalvm.compiler.hotspot.HotSpotGraalCompiler.compile
  [26] org.graalvm.compiler.hotspot.CompilationTask$HotSpotCompilationWrapper.performCompilation
  [27] org.graalvm.compiler.hotspot.CompilationTask$HotSpotCompilationWrapper.performCompilation
  [28] org.graalvm.compiler.core.CompilationWrapper.run
  [29] org.graalvm.compiler.hotspot.CompilationTask.runCompilation
  [30] org.graalvm.compiler.hotspot.HotSpotGraalCompiler.compileMethod
  [31] org.graalvm.compiler.hotspot.HotSpotGraalCompiler.compileMethod
  [32] org.graalvm.compiler.hotspot.HotSpotGraalCompiler.compileMethod
  [33] jdk.vm.ci.hotspot.HotSpotJVMCIRuntime.compileMethod

--- 10003303 ns (0.02%), 1 sample
  [ 0] kr.sanchez.specdeser.core.jakarta.FallbackParser.skipWS
  [ 1] kr.sanchez.specdeser.core.jakarta.FallbackParser.next
  [ 2] kr.sanchez.specdeser.core.jakarta.FallbackParser.next
  [ 3] kr.sanchez.specdeser.benchmark.SpeculativeBenchmark.parserSpeculativeRegular
  [ 4] kr.sanchez.specdeser.benchmark.jmh_generated.SpeculativeBenchmark_parserSpeculativeRegular_jmhTest.parserSpeculativeRegular_thrpt_jmhStub
  [ 5] kr.sanchez.specdeser.benchmark.jmh_generated.SpeculativeBenchmark_parserSpeculativeRegular_jmhTest.parserSpeculativeRegular_Throughput
  [ 6] jdk.internal.reflect.GeneratedMethodAccessor3.invoke
  [ 7] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 8] java.lang.reflect.Method.invoke
  [ 9] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [10] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [11] java.util.concurrent.FutureTask.run
  [12] java.util.concurrent.Executors$RunnableAdapter.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.ThreadPoolExecutor.runWorker
  [15] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [16] java.lang.Thread.run

--- 10002584 ns (0.02%), 1 sample
  [ 0] MemRegion::intersection(MemRegion) const
  [ 1] G1ClearBitMapTask::G1ClearBitmapHRClosure::do_heap_region(HeapRegion*)
  [ 2] HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const
  [ 3] G1ClearBitMapTask::work(unsigned int)
  [ 4] GangWorker::loop()
  [ 5] GangWorker::run()
  [ 6] Thread::call_run()
  [ 7] thread_native_entry(Thread*)
  [ 8] start_thread

--- 10002363 ns (0.02%), 1 sample
  [ 0] BitMap::clear_range(unsigned long, unsigned long)
  [ 1] G1ClearBitMapTask::G1ClearBitmapHRClosure::do_heap_region(HeapRegion*)
  [ 2] HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const
  [ 3] G1ClearBitMapTask::work(unsigned int)
  [ 4] GangWorker::loop()
  [ 5] GangWorker::run()
  [ 6] Thread::call_run()
  [ 7] thread_native_entry(Thread*)
  [ 8] start_thread

--- 10002242 ns (0.02%), 1 sample
  [ 0] /usr/lib/x86_64-linux-gnu/libc-2.31.so
  [ 1] G1CollectedHeap::humongous_obj_allocate_initialize_regions(HeapRegion*, unsigned int, unsigned long)
  [ 2] G1CollectedHeap::humongous_obj_allocate(unsigned long)
  [ 3] G1CollectedHeap::attempt_allocation_humongous(unsigned long)
  [ 4] MemAllocator::allocate() const
  [ 5] TypeArrayKlass::allocate_common(int, bool, JavaThread*)
  [ 6] JVMCIRuntime::new_array_common(JavaThread*, Klass*, int, bool)
  [ 7] java.util.concurrent.ThreadLocalRandom.nextSeed
  [ 8] java.util.concurrent.ThreadLocalRandom.nextInt
  [ 9] jdk.internal.util.random.RandomSupport.boundedNextInt
  [10] java.util.random.RandomGenerator.nextInt
  [11] java.util.concurrent.ThreadLocalRandom.nextInt
  [12] kr.sanchez.specdeser.benchmark.SpeculativeBenchmark.parserSpeculativeRegular
  [13] kr.sanchez.specdeser.benchmark.jmh_generated.SpeculativeBenchmark_parserSpeculativeRegular_jmhTest.parserSpeculativeRegular_thrpt_jmhStub
  [14] kr.sanchez.specdeser.benchmark.jmh_generated.SpeculativeBenchmark_parserSpeculativeRegular_jmhTest.parserSpeculativeRegular_Throughput
  [15] jdk.internal.reflect.GeneratedMethodAccessor3.invoke
  [16] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [17] java.lang.reflect.Method.invoke
  [18] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [19] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [20] java.util.concurrent.FutureTask.run
  [21] java.util.concurrent.Executors$RunnableAdapter.call
  [22] java.util.concurrent.FutureTask.run
  [23] java.util.concurrent.ThreadPoolExecutor.runWorker
  [24] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [25] java.lang.Thread.run

--- 10001692 ns (0.02%), 1 sample
  [ 0] org.graalvm.compiler.java.FrameStateBuilder.create
  [ 1] org.graalvm.compiler.java.FrameStateBuilder.createBytecodePosition
  [ 2] org.graalvm.compiler.java.BytecodeParser.openNodeContext
  [ 3] org.graalvm.compiler.java.BytecodeParser.openNodeContext
  [ 4] org.graalvm.compiler.java.BytecodeParser.iterateBytecodesForBlock
  [ 5] org.graalvm.compiler.java.BytecodeParser.handleBytecodeBlock
  [ 6] org.graalvm.compiler.java.BytecodeParser.processBlock
  [ 7] org.graalvm.compiler.java.BytecodeParser.build
  [ 8] org.graalvm.compiler.java.BytecodeParser.buildRootMethod
  [ 9] org.graalvm.compiler.java.GraphBuilderPhase$Instance.run
  [10] org.graalvm.compiler.java.GraphBuilderPhase.run
  [11] org.graalvm.compiler.java.GraphBuilderPhase.run
  [12] org.graalvm.compiler.phases.BasePhase.apply
  [13] org.graalvm.compiler.phases.BasePhase.apply
  [14] org.graalvm.compiler.phases.PhaseSuite.run
  [15] org.graalvm.compiler.phases.BasePhase.apply
  [16] org.graalvm.compiler.phases.BasePhase.apply
  [17] org.graalvm.compiler.phases.common.inlining.info.elem.InlineableGraph.parseBytecodes
  [18] org.graalvm.compiler.phases.common.inlining.info.elem.InlineableGraph.<init>
  [19] org.graalvm.compiler.phases.common.inlining.info.elem.Inlineable.getInlineableElement
  [20] org.graalvm.compiler.phases.common.inlining.info.AbstractInlineInfo.populateInlinableElements
  [21] org.graalvm.compiler.phases.common.inlining.walker.InliningData.processNextInvoke
  [22] org.graalvm.compiler.phases.common.inlining.walker.InliningData.moveForward
  [23] org.graalvm.compiler.phases.common.inlining.InliningPhase.run
  [24] org.graalvm.compiler.phases.common.inlining.InliningPhase.run
  [25] org.graalvm.compiler.phases.BasePhase.apply
  [26] org.graalvm.compiler.phases.BasePhase.apply
  [27] org.graalvm.compiler.phases.PhaseSuite.run
  [28] org.graalvm.compiler.phases.BasePhase.apply
  [29] org.graalvm.compiler.phases.BasePhase.apply
  [30] org.graalvm.compiler.core.GraalCompiler.emitFrontEnd
  [31] org.graalvm.compiler.core.GraalCompiler.compile
  [32] org.graalvm.compiler.core.GraalCompiler.compileGraph
  [33] org.graalvm.compiler.hotspot.HotSpotGraalCompiler.compileHelper
  [34] org.graalvm.compiler.hotspot.HotSpotGraalCompiler.compile
  [35] org.graalvm.compiler.hotspot.CompilationTask$HotSpotCompilationWrapper.performCompilation
  [36] org.graalvm.compiler.hotspot.CompilationTask$HotSpotCompilationWrapper.performCompilation
  [37] org.graalvm.compiler.core.CompilationWrapper.run
  [38] org.graalvm.compiler.hotspot.CompilationTask.runCompilation
  [39] org.graalvm.compiler.hotspot.HotSpotGraalCompiler.compileMethod
  [40] org.graalvm.compiler.hotspot.HotSpotGraalCompiler.compileMethod
  [41] org.graalvm.compiler.hotspot.HotSpotGraalCompiler.compileMethod
  [42] jdk.vm.ci.hotspot.HotSpotJVMCIRuntime.compileMethod

--- 10001452 ns (0.02%), 1 sample
  [ 0] java.nio.charset.Charset.defaultCharset
  [ 1] java.lang.String.<init>
  [ 2] kr.sanchez.specdeser.core.jakarta.FallbackParser.getString
  [ 3] kr.sanchez.specdeser.benchmark.SpeculativeBenchmark.parserSpeculativeRegular
  [ 4] kr.sanchez.specdeser.benchmark.jmh_generated.SpeculativeBenchmark_parserSpeculativeRegular_jmhTest.parserSpeculativeRegular_thrpt_jmhStub
  [ 5] kr.sanchez.specdeser.benchmark.jmh_generated.SpeculativeBenchmark_parserSpeculativeRegular_jmhTest.parserSpeculativeRegular_Throughput
  [ 6] jdk.internal.reflect.GeneratedMethodAccessor3.invoke
  [ 7] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 8] java.lang.reflect.Method.invoke
  [ 9] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [10] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [11] java.util.concurrent.FutureTask.run
  [12] java.util.concurrent.Executors$RunnableAdapter.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.ThreadPoolExecutor.runWorker
  [15] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [16] java.lang.Thread.run

--- 10001361 ns (0.02%), 1 sample
  [ 0] ObjArrayAllocator::initialize(HeapWordImpl**) const
  [ 1] MemAllocator::allocate() const
  [ 2] TypeArrayKlass::allocate_common(int, bool, JavaThread*)
  [ 3] JVMCIRuntime::new_array_common(JavaThread*, Klass*, int, bool)
  [ 4] java.util.concurrent.ThreadLocalRandom.nextSeed
  [ 5] java.util.concurrent.ThreadLocalRandom.nextInt
  [ 6] jdk.internal.util.random.RandomSupport.boundedNextInt
  [ 7] java.util.random.RandomGenerator.nextInt
  [ 8] java.util.concurrent.ThreadLocalRandom.nextInt
  [ 9] kr.sanchez.specdeser.benchmark.SpeculativeBenchmark.parserSpeculativeRegular
  [10] kr.sanchez.specdeser.benchmark.jmh_generated.SpeculativeBenchmark_parserSpeculativeRegular_jmhTest.parserSpeculativeRegular_thrpt_jmhStub
  [11] kr.sanchez.specdeser.benchmark.jmh_generated.SpeculativeBenchmark_parserSpeculativeRegular_jmhTest.parserSpeculativeRegular_Throughput
  [12] jdk.internal.reflect.GeneratedMethodAccessor3.invoke
  [13] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [14] java.lang.reflect.Method.invoke
  [15] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [16] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [17] java.util.concurrent.FutureTask.run
  [18] java.util.concurrent.Executors$RunnableAdapter.call
  [19] java.util.concurrent.FutureTask.run
  [20] java.util.concurrent.ThreadPoolExecutor.runWorker
  [21] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [22] java.lang.Thread.run

--- 10001041 ns (0.02%), 1 sample
  [ 0] kr.sanchez.specdeser.core.jakarta.FallbackParser.next
  [ 1] kr.sanchez.specdeser.benchmark.SpeculativeBenchmark.parserSpeculativeRegular
  [ 2] kr.sanchez.specdeser.benchmark.jmh_generated.SpeculativeBenchmark_parserSpeculativeRegular_jmhTest.parserSpeculativeRegular_thrpt_jmhStub
  [ 3] kr.sanchez.specdeser.benchmark.jmh_generated.SpeculativeBenchmark_parserSpeculativeRegular_jmhTest.parserSpeculativeRegular_Throughput
  [ 4] jdk.internal.reflect.GeneratedMethodAccessor3.invoke
  [ 5] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 6] java.lang.reflect.Method.invoke
  [ 7] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [ 8] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [ 9] java.util.concurrent.FutureTask.run
  [10] java.util.concurrent.Executors$RunnableAdapter.call
  [11] java.util.concurrent.FutureTask.run
  [12] java.util.concurrent.ThreadPoolExecutor.runWorker
  [13] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [14] java.lang.Thread.run

--- 10000770 ns (0.02%), 1 sample
  [ 0] jbyte_disjoint_arraycopy
  [ 1] java.io.ByteArrayInputStream.read
  [ 2] kr.sanchez.specdeser.core.jakarta.FallbackParser.loadIntoBuffer
  [ 3] kr.sanchez.specdeser.core.jakarta.FallbackParser.<init>
  [ 4] kr.sanchez.specdeser.benchmark.SpeculativeBenchmark.parserSpeculativeRegular
  [ 5] kr.sanchez.specdeser.benchmark.jmh_generated.SpeculativeBenchmark_parserSpeculativeRegular_jmhTest.parserSpeculativeRegular_thrpt_jmhStub
  [ 6] kr.sanchez.specdeser.benchmark.jmh_generated.SpeculativeBenchmark_parserSpeculativeRegular_jmhTest.parserSpeculativeRegular_Throughput
  [ 7] jdk.internal.reflect.GeneratedMethodAccessor3.invoke
  [ 8] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 9] java.lang.reflect.Method.invoke
  [10] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] java.util.concurrent.FutureTask.run
  [13] java.util.concurrent.Executors$RunnableAdapter.call
  [14] java.util.concurrent.FutureTask.run
  [15] java.util.concurrent.ThreadPoolExecutor.runWorker
  [16] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [17] java.lang.Thread.run

--- 10000420 ns (0.02%), 1 sample
  [ 0] java.util.regex.Pattern.lambda$DOT$4
  [ 1] java.util.regex.Pattern$$Lambda$21.0x0000000800c701f8.is
  [ 2] java.util.regex.Pattern$CharPropertyGreedy.match
  [ 3] java.util.regex.Matcher.match
  [ 4] java.util.regex.Matcher.matches
  [ 5] org.graalvm.compiler.debug.MethodFilter$BaseFilter.matches
  [ 6] org.graalvm.compiler.debug.MethodFilter.lambda$matches$1
  [ 7] org.graalvm.compiler.debug.MethodFilter$$Lambda$60.0x0000000800dcae20.test
  [ 8] org.graalvm.compiler.debug.MethodFilter.matches
  [ 9] org.graalvm.compiler.debug.MethodFilter.matches
  [10] org.graalvm.compiler.debug.DebugConfigImpl.checkMethodFilter
  [11] org.graalvm.compiler.debug.DebugConfigImpl.getLevel
  [12] org.graalvm.compiler.debug.DebugConfigImpl.isEnabled
  [13] org.graalvm.compiler.debug.DebugConfigImpl.isMemUseTrackingEnabled
  [14] org.graalvm.compiler.debug.ScopeImpl.updateFlags
  [15] org.graalvm.compiler.debug.ScopeImpl.scope
  [16] org.graalvm.compiler.debug.DebugContext.enterScope
  [17] org.graalvm.compiler.debug.DebugContext.scope
  [18] org.graalvm.compiler.java.BytecodeParser.build
  [19] org.graalvm.compiler.java.BytecodeParser.parseAndInlineCallee
  [20] org.graalvm.compiler.java.BytecodeParser.inline
  [21] org.graalvm.compiler.java.BytecodeParser.tryInline
  [22] org.graalvm.compiler.java.BytecodeParser.appendInvoke
  [23] org.graalvm.compiler.java.BytecodeParser.genDynamicInvokeHelper
  [24] org.graalvm.compiler.java.BytecodeParser.genInvokeVirtual
  [25] org.graalvm.compiler.java.BytecodeParser.genInvokeVirtual
  [26] org.graalvm.compiler.java.BytecodeParser.processBytecode
  [27] org.graalvm.compiler.java.BytecodeParser.iterateBytecodesForBlock
  [28] org.graalvm.compiler.java.BytecodeParser.handleBytecodeBlock
  [29] org.graalvm.compiler.java.BytecodeParser.processBlock
  [30] org.graalvm.compiler.java.BytecodeParser.build
  [31] org.graalvm.compiler.java.BytecodeParser.buildRootMethod
  [32] org.graalvm.compiler.java.GraphBuilderPhase$Instance.run
  [33] org.graalvm.compiler.java.GraphBuilderPhase.run
  [34] org.graalvm.compiler.java.GraphBuilderPhase.run
  [35] org.graalvm.compiler.phases.BasePhase.apply
  [36] org.graalvm.compiler.phases.BasePhase.apply
  [37] org.graalvm.compiler.phases.PhaseSuite.run
  [38] org.graalvm.compiler.phases.BasePhase.apply
  [39] org.graalvm.compiler.phases.BasePhase.apply
  [40] org.graalvm.compiler.phases.common.inlining.info.elem.InlineableGraph.parseBytecodes
  [41] org.graalvm.compiler.phases.common.inlining.info.elem.InlineableGraph.<init>
  [42] org.graalvm.compiler.phases.common.inlining.info.elem.Inlineable.getInlineableElement
  [43] org.graalvm.compiler.phases.common.inlining.info.AbstractInlineInfo.populateInlinableElements
  [44] org.graalvm.compiler.phases.common.inlining.walker.InliningData.processNextInvoke
  [45] org.graalvm.compiler.phases.common.inlining.walker.InliningData.moveForward
  [46] org.graalvm.compiler.phases.common.inlining.InliningPhase.run
  [47] org.graalvm.compiler.phases.common.inlining.InliningPhase.run
  [48] org.graalvm.compiler.phases.BasePhase.apply
  [49] org.graalvm.compiler.phases.BasePhase.apply
  [50] org.graalvm.compiler.phases.PhaseSuite.run
  [51] org.graalvm.compiler.phases.BasePhase.apply
  [52] org.graalvm.compiler.phases.BasePhase.apply
  [53] org.graalvm.compiler.core.GraalCompiler.emitFrontEnd
  [54] org.graalvm.compiler.core.GraalCompiler.compile
  [55] org.graalvm.compiler.core.GraalCompiler.compileGraph
  [56] org.graalvm.compiler.hotspot.HotSpotGraalCompiler.compileHelper
  [57] org.graalvm.compiler.hotspot.HotSpotGraalCompiler.compile
  [58] org.graalvm.compiler.hotspot.CompilationTask$HotSpotCompilationWrapper.performCompilation
  [59] org.graalvm.compiler.hotspot.CompilationTask$HotSpotCompilationWrapper.performCompilation
  [60] org.graalvm.compiler.core.CompilationWrapper.run
  [61] org.graalvm.compiler.hotspot.CompilationTask.runCompilation
  [62] org.graalvm.compiler.hotspot.HotSpotGraalCompiler.compileMethod
  [63] org.graalvm.compiler.hotspot.HotSpotGraalCompiler.compileMethod
  [64] org.graalvm.compiler.hotspot.HotSpotGraalCompiler.compileMethod
  [65] jdk.vm.ci.hotspot.HotSpotJVMCIRuntime.compileMethod

--- 10000198 ns (0.02%), 1 sample
  [ 0] kr.sanchez.specdeser.core.jakarta.FallbackParser.processString
  [ 1] kr.sanchez.specdeser.core.jakarta.FallbackParser.next
  [ 2] kr.sanchez.specdeser.core.jakarta.FallbackParser.next
  [ 3] kr.sanchez.specdeser.benchmark.SpeculativeBenchmark.parserSpeculativeRegular
  [ 4] kr.sanchez.specdeser.benchmark.jmh_generated.SpeculativeBenchmark_parserSpeculativeRegular_jmhTest.parserSpeculativeRegular_thrpt_jmhStub
  [ 5] kr.sanchez.specdeser.benchmark.jmh_generated.SpeculativeBenchmark_parserSpeculativeRegular_jmhTest.parserSpeculativeRegular_Throughput
  [ 6] jdk.internal.reflect.GeneratedMethodAccessor3.invoke
  [ 7] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 8] java.lang.reflect.Method.invoke
  [ 9] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [10] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [11] java.util.concurrent.FutureTask.run
  [12] java.util.concurrent.Executors$RunnableAdapter.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.ThreadPoolExecutor.runWorker
  [15] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [16] java.lang.Thread.run

--- 9999909 ns (0.02%), 1 sample
  [ 0] exit_to_user_mode_prepare_[k]
  [ 1] irqentry_exit_to_user_mode_[k]
  [ 2] irqentry_exit_[k]
  [ 3] sysvec_irq_work_[k]
  [ 4] asm_sysvec_irq_work_[k]
  [ 5] /usr/lib/x86_64-linux-gnu/libc-2.31.so
  [ 6] MemAllocator::allocate() const
  [ 7] TypeArrayKlass::allocate_common(int, bool, JavaThread*)
  [ 8] JVMCIRuntime::new_array_common(JavaThread*, Klass*, int, bool)
  [ 9] java.util.concurrent.ThreadLocalRandom.nextSeed
  [10] java.util.concurrent.ThreadLocalRandom.nextInt
  [11] jdk.internal.util.random.RandomSupport.boundedNextInt
  [12] java.util.random.RandomGenerator.nextInt
  [13] java.util.concurrent.ThreadLocalRandom.nextInt
  [14] kr.sanchez.specdeser.benchmark.SpeculativeBenchmark.parserSpeculativeRegular
  [15] kr.sanchez.specdeser.benchmark.jmh_generated.SpeculativeBenchmark_parserSpeculativeRegular_jmhTest.parserSpeculativeRegular_thrpt_jmhStub
  [16] kr.sanchez.specdeser.benchmark.jmh_generated.SpeculativeBenchmark_parserSpeculativeRegular_jmhTest.parserSpeculativeRegular_Throughput
  [17] jdk.internal.reflect.GeneratedMethodAccessor3.invoke
  [18] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [19] java.lang.reflect.Method.invoke
  [20] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [21] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [22] java.util.concurrent.FutureTask.run
  [23] java.util.concurrent.Executors$RunnableAdapter.call
  [24] java.util.concurrent.FutureTask.run
  [25] java.util.concurrent.ThreadPoolExecutor.runWorker
  [26] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [27] java.lang.Thread.run

--- 9999617 ns (0.02%), 1 sample
  [ 0] java.util.Arrays.copyOfRange
  [ 1] java.lang.String.<init>
  [ 2] java.lang.String.<init>
  [ 3] kr.sanchez.specdeser.core.jakarta.FallbackParser.getString
  [ 4] kr.sanchez.specdeser.benchmark.SpeculativeBenchmark.parserSpeculativeRegular
  [ 5] kr.sanchez.specdeser.benchmark.jmh_generated.SpeculativeBenchmark_parserSpeculativeRegular_jmhTest.parserSpeculativeRegular_thrpt_jmhStub
  [ 6] kr.sanchez.specdeser.benchmark.jmh_generated.SpeculativeBenchmark_parserSpeculativeRegular_jmhTest.parserSpeculativeRegular_Throughput
  [ 7] jdk.internal.reflect.GeneratedMethodAccessor3.invoke
  [ 8] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 9] java.lang.reflect.Method.invoke
  [10] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] java.util.concurrent.FutureTask.run
  [13] java.util.concurrent.Executors$RunnableAdapter.call
  [14] java.util.concurrent.FutureTask.run
  [15] java.util.concurrent.ThreadPoolExecutor.runWorker
  [16] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [17] java.lang.Thread.run

--- 9999598 ns (0.02%), 1 sample
  [ 0] java.util.Arrays.copyOfRange
  [ 1] java.lang.String.<init>
  [ 2] java.lang.String.<init>
  [ 3] kr.sanchez.specdeser.core.jakarta.FallbackParser.getString
  [ 4] kr.sanchez.specdeser.benchmark.SpeculativeBenchmark.parserSpeculativeRegular
  [ 5] kr.sanchez.specdeser.benchmark.jmh_generated.SpeculativeBenchmark_parserSpeculativeRegular_jmhTest.parserSpeculativeRegular_thrpt_jmhStub
  [ 6] kr.sanchez.specdeser.benchmark.jmh_generated.SpeculativeBenchmark_parserSpeculativeRegular_jmhTest.parserSpeculativeRegular_Throughput
  [ 7] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 8] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [ 9] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [10] java.lang.reflect.Method.invoke
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.Executors$RunnableAdapter.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.ThreadPoolExecutor.runWorker
  [17] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [18] java.lang.Thread.run

--- 9999266 ns (0.02%), 1 sample
  [ 0] FreeRegionList::remove_starting_at(HeapRegion*, unsigned int)
  [ 1] HeapRegionManager::allocate_humongous(unsigned int)
  [ 2] G1CollectedHeap::humongous_obj_allocate(unsigned long)
  [ 3] G1CollectedHeap::attempt_allocation_humongous(unsigned long)
  [ 4] MemAllocator::allocate() const
  [ 5] TypeArrayKlass::allocate_common(int, bool, JavaThread*)
  [ 6] JVMCIRuntime::new_array_common(JavaThread*, Klass*, int, bool)
  [ 7] java.util.concurrent.ThreadLocalRandom.nextSeed
  [ 8] java.util.concurrent.ThreadLocalRandom.nextInt
  [ 9] jdk.internal.util.random.RandomSupport.boundedNextInt
  [10] java.util.random.RandomGenerator.nextInt
  [11] java.util.concurrent.ThreadLocalRandom.nextInt
  [12] kr.sanchez.specdeser.benchmark.SpeculativeBenchmark.parserSpeculativeRegular
  [13] kr.sanchez.specdeser.benchmark.jmh_generated.SpeculativeBenchmark_parserSpeculativeRegular_jmhTest.parserSpeculativeRegular_thrpt_jmhStub
  [14] kr.sanchez.specdeser.benchmark.jmh_generated.SpeculativeBenchmark_parserSpeculativeRegular_jmhTest.parserSpeculativeRegular_Throughput
  [15] jdk.internal.reflect.GeneratedMethodAccessor3.invoke
  [16] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [17] java.lang.reflect.Method.invoke
  [18] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [19] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [20] java.util.concurrent.FutureTask.run
  [21] java.util.concurrent.Executors$RunnableAdapter.call
  [22] java.util.concurrent.FutureTask.run
  [23] java.util.concurrent.ThreadPoolExecutor.runWorker
  [24] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [25] java.lang.Thread.run

--- 9999188 ns (0.02%), 1 sample
  [ 0] kr.sanchez.specdeser.core.jakarta.FallbackParser.slowNumberCheck
  [ 1] kr.sanchez.specdeser.core.jakarta.FallbackParser.processNumber
  [ 2] kr.sanchez.specdeser.core.jakarta.FallbackParser.next
  [ 3] kr.sanchez.specdeser.core.jakarta.FallbackParser.next
  [ 4] kr.sanchez.specdeser.benchmark.SpeculativeBenchmark.parserSpeculativeRegular
  [ 5] kr.sanchez.specdeser.benchmark.jmh_generated.SpeculativeBenchmark_parserSpeculativeRegular_jmhTest.parserSpeculativeRegular_thrpt_jmhStub
  [ 6] kr.sanchez.specdeser.benchmark.jmh_generated.SpeculativeBenchmark_parserSpeculativeRegular_jmhTest.parserSpeculativeRegular_Throughput
  [ 7] jdk.internal.reflect.GeneratedMethodAccessor3.invoke
  [ 8] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 9] java.lang.reflect.Method.invoke
  [10] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] java.util.concurrent.FutureTask.run
  [13] java.util.concurrent.Executors$RunnableAdapter.call
  [14] java.util.concurrent.FutureTask.run
  [15] java.util.concurrent.ThreadPoolExecutor.runWorker
  [16] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [17] java.lang.Thread.run

--- 9999067 ns (0.02%), 1 sample
  [ 0] java.lang.AbstractStringBuilder.ensureCapacityInternal
  [ 1] java.lang.AbstractStringBuilder.append
  [ 2] java.lang.StringBuilder.append
  [ 3] jdk.vm.ci.meta.MetaUtil.replacePackageSeparatorsWithDot
  [ 4] jdk.vm.ci.meta.MetaUtil.internalNameToJava
  [ 5] jdk.vm.ci.meta.JavaType.toJavaName
  [ 6] org.graalvm.compiler.debug.MethodFilter$BaseFilter.matches
  [ 7] org.graalvm.compiler.debug.MethodFilter.lambda$matches$1
  [ 8] org.graalvm.compiler.debug.MethodFilter$$Lambda$60.0x0000000800dcae20.test
  [ 9] org.graalvm.compiler.debug.MethodFilter.matches
  [10] org.graalvm.compiler.debug.MethodFilter.matches
  [11] org.graalvm.compiler.debug.DebugConfigImpl.checkMethodFilter
  [12] org.graalvm.compiler.debug.DebugConfigImpl.getLevel
  [13] org.graalvm.compiler.debug.DebugConfigImpl.getLogLevel
  [14] org.graalvm.compiler.debug.ScopeImpl.updateFlags
  [15] org.graalvm.compiler.debug.ScopeImpl.scope
  [16] org.graalvm.compiler.debug.DebugContext.enterScope
  [17] org.graalvm.compiler.debug.DebugContext.scope
  [18] org.graalvm.compiler.nodes.util.GraphUtil.killCFG
  [19] org.graalvm.compiler.phases.common.CanonicalizerPhase$Tool.deleteBranch
  [20] org.graalvm.compiler.nodes.IfNode.simplify
  [21] org.graalvm.compiler.phases.common.CanonicalizerPhase.tryCanonicalize
  [22] org.graalvm.compiler.phases.common.CanonicalizerPhase.processNode
  [23] org.graalvm.compiler.phases.common.CanonicalizerPhase.processWorkSet
  [24] org.graalvm.compiler.phases.common.IncrementalCanonicalizerPhase.run
  [25] org.graalvm.compiler.phases.common.IncrementalCanonicalizerPhase.run
  [26] org.graalvm.compiler.phases.BasePhase.apply
  [27] org.graalvm.compiler.phases.BasePhase.apply
  [28] org.graalvm.compiler.phases.common.CanonicalizerPhase.applyIncremental
  [29] org.graalvm.compiler.phases.common.IterativeConditionalEliminationPhase.run
  [30] org.graalvm.compiler.phases.common.IterativeConditionalEliminationPhase.run
  [31] org.graalvm.compiler.phases.BasePhase.apply
  [32] org.graalvm.compiler.phases.BasePhase.apply
  [33] org.graalvm.compiler.phases.PhaseSuite.run
  [34] org.graalvm.compiler.phases.BasePhase.apply
  [35] org.graalvm.compiler.phases.BasePhase.apply
  [36] org.graalvm.compiler.core.GraalCompiler.emitFrontEnd
  [37] org.graalvm.compiler.core.GraalCompiler.compile
  [38] org.graalvm.compiler.core.GraalCompiler.compileGraph
  [39] org.graalvm.compiler.hotspot.HotSpotGraalCompiler.compileHelper
  [40] org.graalvm.compiler.hotspot.HotSpotGraalCompiler.compile
  [41] org.graalvm.compiler.hotspot.CompilationTask$HotSpotCompilationWrapper.performCompilation
  [42] org.graalvm.compiler.hotspot.CompilationTask$HotSpotCompilationWrapper.performCompilation
  [43] org.graalvm.compiler.core.CompilationWrapper.run
  [44] org.graalvm.compiler.hotspot.CompilationTask.runCompilation
  [45] org.graalvm.compiler.hotspot.HotSpotGraalCompiler.compileMethod
  [46] org.graalvm.compiler.hotspot.HotSpotGraalCompiler.compileMethod
  [47] org.graalvm.compiler.hotspot.HotSpotGraalCompiler.compileMethod
  [48] jdk.vm.ci.hotspot.HotSpotJVMCIRuntime.compileMethod

--- 9998707 ns (0.02%), 1 sample
  [ 0] HeapRegionManager::find_contiguous_in_free_list(unsigned int)
  [ 1] HeapRegionManager::allocate_humongous(unsigned int)
  [ 2] G1CollectedHeap::humongous_obj_allocate(unsigned long)
  [ 3] G1CollectedHeap::attempt_allocation_humongous(unsigned long)
  [ 4] MemAllocator::allocate() const
  [ 5] TypeArrayKlass::allocate_common(int, bool, JavaThread*)
  [ 6] JVMCIRuntime::new_array_common(JavaThread*, Klass*, int, bool)
  [ 7] java.util.concurrent.ThreadLocalRandom.nextSeed
  [ 8] java.util.concurrent.ThreadLocalRandom.nextInt
  [ 9] jdk.internal.util.random.RandomSupport.boundedNextInt
  [10] java.util.random.RandomGenerator.nextInt
  [11] java.util.concurrent.ThreadLocalRandom.nextInt
  [12] kr.sanchez.specdeser.benchmark.SpeculativeBenchmark.parserSpeculativeRegular
  [13] kr.sanchez.specdeser.benchmark.jmh_generated.SpeculativeBenchmark_parserSpeculativeRegular_jmhTest.parserSpeculativeRegular_thrpt_jmhStub
  [14] kr.sanchez.specdeser.benchmark.jmh_generated.SpeculativeBenchmark_parserSpeculativeRegular_jmhTest.parserSpeculativeRegular_Throughput
  [15] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [16] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [17] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [18] java.lang.reflect.Method.invoke
  [19] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [20] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [21] java.util.concurrent.FutureTask.run
  [22] java.util.concurrent.Executors$RunnableAdapter.call
  [23] java.util.concurrent.FutureTask.run
  [24] java.util.concurrent.ThreadPoolExecutor.runWorker
  [25] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [26] java.lang.Thread.run

--- 9998407 ns (0.02%), 1 sample
  [ 0] pthread_mutex_lock
  [ 1] G1MonitoringSupport::recalculate_sizes()
  [ 2] G1MonitoringSupport::update_sizes()
  [ 3] G1CollectedHeap::humongous_obj_allocate(unsigned long)
  [ 4] G1CollectedHeap::attempt_allocation_humongous(unsigned long)
  [ 5] MemAllocator::allocate() const
  [ 6] TypeArrayKlass::allocate_common(int, bool, JavaThread*)
  [ 7] JVMCIRuntime::new_array_common(JavaThread*, Klass*, int, bool)
  [ 8] java.util.concurrent.ThreadLocalRandom.nextSeed
  [ 9] java.util.concurrent.ThreadLocalRandom.nextInt
  [10] jdk.internal.util.random.RandomSupport.boundedNextInt
  [11] java.util.random.RandomGenerator.nextInt
  [12] java.util.concurrent.ThreadLocalRandom.nextInt
  [13] kr.sanchez.specdeser.benchmark.SpeculativeBenchmark.parserSpeculativeRegular
  [14] kr.sanchez.specdeser.benchmark.jmh_generated.SpeculativeBenchmark_parserSpeculativeRegular_jmhTest.parserSpeculativeRegular_thrpt_jmhStub
  [15] kr.sanchez.specdeser.benchmark.jmh_generated.SpeculativeBenchmark_parserSpeculativeRegular_jmhTest.parserSpeculativeRegular_Throughput
  [16] jdk.internal.reflect.GeneratedMethodAccessor3.invoke
  [17] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [18] java.lang.reflect.Method.invoke
  [19] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [20] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [21] java.util.concurrent.FutureTask.run
  [22] java.util.concurrent.Executors$RunnableAdapter.call
  [23] java.util.concurrent.FutureTask.run
  [24] java.util.concurrent.ThreadPoolExecutor.runWorker
  [25] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [26] java.lang.Thread.run

--- 9998385 ns (0.02%), 1 sample
  [ 0] kr.sanchez.specdeser.core.jakarta.FallbackParser.fastNaturalNumberCheck
  [ 1] kr.sanchez.specdeser.core.jakarta.FallbackParser.processNumber
  [ 2] kr.sanchez.specdeser.core.jakarta.FallbackParser.next
  [ 3] kr.sanchez.specdeser.core.jakarta.FallbackParser.next
  [ 4] kr.sanchez.specdeser.benchmark.SpeculativeBenchmark.parserSpeculativeRegular
  [ 5] kr.sanchez.specdeser.benchmark.jmh_generated.SpeculativeBenchmark_parserSpeculativeRegular_jmhTest.parserSpeculativeRegular_thrpt_jmhStub
  [ 6] kr.sanchez.specdeser.benchmark.jmh_generated.SpeculativeBenchmark_parserSpeculativeRegular_jmhTest.parserSpeculativeRegular_Throughput
  [ 7] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 8] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [ 9] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [10] java.lang.reflect.Method.invoke
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.Executors$RunnableAdapter.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.ThreadPoolExecutor.runWorker
  [17] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [18] java.lang.Thread.run

--- 9998265 ns (0.02%), 1 sample
  [ 0] java.lang.Object.equals
  [ 1] org.graalvm.compiler.lir.dfa.LocationMarkerPhase$Marker.shouldProcessValue
  [ 2] org.graalvm.compiler.lir.dfa.LocationMarker$3.visitValue
  [ 3] org.graalvm.compiler.lir.ValueConsumer.visitValue
  [ 4] org.graalvm.compiler.lir.LIRIntrospection.visitEach
  [ 5] org.graalvm.compiler.lir.LIRInstructionClass.visitEachTemp
  [ 6] org.graalvm.compiler.lir.LIRInstruction.visitEachTemp
  [ 7] org.graalvm.compiler.lir.dfa.LocationMarker.processInstructionBottomUp
  [ 8] org.graalvm.compiler.lir.dfa.LocationMarker.processBlock
  [ 9] org.graalvm.compiler.lir.dfa.LocationMarker.build
  [10] org.graalvm.compiler.lir.dfa.LocationMarkerPhase.run
  [11] org.graalvm.compiler.lir.dfa.LocationMarkerPhase.run
  [12] org.graalvm.compiler.lir.phases.LIRPhase.apply
  [13] org.graalvm.compiler.lir.phases.LIRPhase.apply
  [14] org.graalvm.compiler.lir.phases.LIRPhaseSuite.run
  [15] org.graalvm.compiler.lir.phases.LIRPhase.apply
  [16] org.graalvm.compiler.lir.phases.LIRPhase.apply
  [17] org.graalvm.compiler.core.gen.LIRCompilerBackend.emitLowLevel
  [18] org.graalvm.compiler.core.gen.LIRCompilerBackend.emitLIR0
  [19] org.graalvm.compiler.core.gen.LIRCompilerBackend.emitLIR
  [20] org.graalvm.compiler.core.gen.LIRCompilerBackend.emitBackEnd
  [21] org.graalvm.compiler.core.target.Backend.emitBackEnd
  [22] org.graalvm.compiler.core.GraalCompiler.compile
  [23] org.graalvm.compiler.core.GraalCompiler.compileGraph
  [24] org.graalvm.compiler.hotspot.HotSpotGraalCompiler.compileHelper
  [25] org.graalvm.compiler.hotspot.HotSpotGraalCompiler.compile
  [26] org.graalvm.compiler.hotspot.CompilationTask$HotSpotCompilationWrapper.performCompilation
  [27] org.graalvm.compiler.hotspot.CompilationTask$HotSpotCompilationWrapper.performCompilation
  [28] org.graalvm.compiler.core.CompilationWrapper.run
  [29] org.graalvm.compiler.hotspot.CompilationTask.runCompilation
  [30] org.graalvm.compiler.hotspot.HotSpotGraalCompiler.compileMethod
  [31] org.graalvm.compiler.hotspot.HotSpotGraalCompiler.compileMethod
  [32] org.graalvm.compiler.hotspot.HotSpotGraalCompiler.compileMethod
  [33] jdk.vm.ci.hotspot.HotSpotJVMCIRuntime.compileMethod

--- 9998195 ns (0.02%), 1 sample
  [ 0] kr.sanchez.specdeser.core.jakarta.FallbackParser.skipWS
  [ 1] kr.sanchez.specdeser.core.jakarta.FallbackParser.hasNext
  [ 2] kr.sanchez.specdeser.benchmark.SpeculativeBenchmark.parserSpeculativeRegular
  [ 3] kr.sanchez.specdeser.benchmark.jmh_generated.SpeculativeBenchmark_parserSpeculativeRegular_jmhTest.parserSpeculativeRegular_thrpt_jmhStub
  [ 4] kr.sanchez.specdeser.benchmark.jmh_generated.SpeculativeBenchmark_parserSpeculativeRegular_jmhTest.parserSpeculativeRegular_Throughput
  [ 5] jdk.internal.reflect.GeneratedMethodAccessor3.invoke
  [ 6] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 7] java.lang.reflect.Method.invoke
  [ 8] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [ 9] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [10] java.util.concurrent.FutureTask.run
  [11] java.util.concurrent.Executors$RunnableAdapter.call
  [12] java.util.concurrent.FutureTask.run
  [13] java.util.concurrent.ThreadPoolExecutor.runWorker
  [14] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [15] java.lang.Thread.run

--- 9997934 ns (0.02%), 1 sample
  [ 0] kr.sanchez.specdeser.core.jakarta.FallbackParser.processString
  [ 1] kr.sanchez.specdeser.core.jakarta.FallbackParser.next
  [ 2] kr.sanchez.specdeser.benchmark.SpeculativeBenchmark.parserSpeculativeRegular
  [ 3] kr.sanchez.specdeser.benchmark.jmh_generated.SpeculativeBenchmark_parserSpeculativeRegular_jmhTest.parserSpeculativeRegular_thrpt_jmhStub
  [ 4] kr.sanchez.specdeser.benchmark.jmh_generated.SpeculativeBenchmark_parserSpeculativeRegular_jmhTest.parserSpeculativeRegular_Throughput
  [ 5] jdk.internal.reflect.GeneratedMethodAccessor3.invoke
  [ 6] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 7] java.lang.reflect.Method.invoke
  [ 8] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [ 9] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [10] java.util.concurrent.FutureTask.run
  [11] java.util.concurrent.Executors$RunnableAdapter.call
  [12] java.util.concurrent.FutureTask.run
  [13] java.util.concurrent.ThreadPoolExecutor.runWorker
  [14] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [15] java.lang.Thread.run

--- 9997885 ns (0.02%), 1 sample
  [ 0] kr.sanchez.specdeser.core.jakarta.FallbackParser.next
  [ 1] kr.sanchez.specdeser.core.jakarta.FallbackParser.next
  [ 2] kr.sanchez.specdeser.benchmark.SpeculativeBenchmark.parserSpeculativeRegular
  [ 3] kr.sanchez.specdeser.benchmark.jmh_generated.SpeculativeBenchmark_parserSpeculativeRegular_jmhTest.parserSpeculativeRegular_thrpt_jmhStub
  [ 4] kr.sanchez.specdeser.benchmark.jmh_generated.SpeculativeBenchmark_parserSpeculativeRegular_jmhTest.parserSpeculativeRegular_Throughput
  [ 5] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 6] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [ 7] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 8] java.lang.reflect.Method.invoke
  [ 9] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [10] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [11] java.util.concurrent.FutureTask.run
  [12] java.util.concurrent.Executors$RunnableAdapter.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.ThreadPoolExecutor.runWorker
  [15] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [16] java.lang.Thread.run

--- 9997785 ns (0.02%), 1 sample
  [ 0] kr.sanchez.specdeser.core.jakarta.FallbackParser.loadIntoBuffer
  [ 1] kr.sanchez.specdeser.core.jakarta.FallbackParser.<init>
  [ 2] kr.sanchez.specdeser.benchmark.SpeculativeBenchmark.parserSpeculativeRegular
  [ 3] kr.sanchez.specdeser.benchmark.jmh_generated.SpeculativeBenchmark_parserSpeculativeRegular_jmhTest.parserSpeculativeRegular_thrpt_jmhStub
  [ 4] kr.sanchez.specdeser.benchmark.jmh_generated.SpeculativeBenchmark_parserSpeculativeRegular_jmhTest.parserSpeculativeRegular_Throughput
  [ 5] jdk.internal.reflect.GeneratedMethodAccessor3.invoke
  [ 6] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 7] java.lang.reflect.Method.invoke
  [ 8] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [ 9] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [10] java.util.concurrent.FutureTask.run
  [11] java.util.concurrent.Executors$RunnableAdapter.call
  [12] java.util.concurrent.FutureTask.run
  [13] java.util.concurrent.ThreadPoolExecutor.runWorker
  [14] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [15] java.lang.Thread.run

--- 9997584 ns (0.02%), 1 sample
  [ 0] kr.sanchez.specdeser.core.jakarta.FallbackParser.processString
  [ 1] kr.sanchez.specdeser.core.jakarta.FallbackParser.next
  [ 2] kr.sanchez.specdeser.core.jakarta.FallbackParser.next
  [ 3] kr.sanchez.specdeser.benchmark.SpeculativeBenchmark.parserSpeculativeRegular
  [ 4] kr.sanchez.specdeser.benchmark.jmh_generated.SpeculativeBenchmark_parserSpeculativeRegular_jmhTest.parserSpeculativeRegular_thrpt_jmhStub
  [ 5] kr.sanchez.specdeser.benchmark.jmh_generated.SpeculativeBenchmark_parserSpeculativeRegular_jmhTest.parserSpeculativeRegular_Throughput
  [ 6] jdk.internal.reflect.GeneratedMethodAccessor3.invoke
  [ 7] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 8] java.lang.reflect.Method.invoke
  [ 9] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [10] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [11] java.util.concurrent.FutureTask.run
  [12] java.util.concurrent.Executors$RunnableAdapter.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.ThreadPoolExecutor.runWorker
  [15] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [16] java.lang.Thread.run

--- 9997073 ns (0.02%), 1 sample
  [ 0] __pthread_cleanup_push
  [ 1] [unknown]
  [ 2] java.util.concurrent.ThreadLocalRandom.nextSeed
  [ 3] java.util.concurrent.ThreadLocalRandom.nextInt
  [ 4] jdk.internal.util.random.RandomSupport.boundedNextInt
  [ 5] java.util.random.RandomGenerator.nextInt
  [ 6] java.util.concurrent.ThreadLocalRandom.nextInt
  [ 7] kr.sanchez.specdeser.benchmark.SpeculativeBenchmark.parserSpeculativeRegular
  [ 8] kr.sanchez.specdeser.benchmark.jmh_generated.SpeculativeBenchmark_parserSpeculativeRegular_jmhTest.parserSpeculativeRegular_thrpt_jmhStub
  [ 9] kr.sanchez.specdeser.benchmark.jmh_generated.SpeculativeBenchmark_parserSpeculativeRegular_jmhTest.parserSpeculativeRegular_Throughput
  [10] jdk.internal.reflect.GeneratedMethodAccessor3.invoke
  [11] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [12] java.lang.reflect.Method.invoke
  [13] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [14] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.Executors$RunnableAdapter.call
  [17] java.util.concurrent.FutureTask.run
  [18] java.util.concurrent.ThreadPoolExecutor.runWorker
  [19] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [20] java.lang.Thread.run

--- 9996793 ns (0.02%), 1 sample
  [ 0] kr.sanchez.specdeser.core.jakarta.FallbackParser.processString
  [ 1] kr.sanchez.specdeser.core.jakarta.FallbackParser.next
  [ 2] kr.sanchez.specdeser.core.jakarta.FallbackParser.next
  [ 3] kr.sanchez.specdeser.benchmark.SpeculativeBenchmark.parserSpeculativeRegular
  [ 4] kr.sanchez.specdeser.benchmark.jmh_generated.SpeculativeBenchmark_parserSpeculativeRegular_jmhTest.parserSpeculativeRegular_thrpt_jmhStub
  [ 5] kr.sanchez.specdeser.benchmark.jmh_generated.SpeculativeBenchmark_parserSpeculativeRegular_jmhTest.parserSpeculativeRegular_Throughput
  [ 6] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 7] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [ 8] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 9] java.lang.reflect.Method.invoke
  [10] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] java.util.concurrent.FutureTask.run
  [13] java.util.concurrent.Executors$RunnableAdapter.call
  [14] java.util.concurrent.FutureTask.run
  [15] java.util.concurrent.ThreadPoolExecutor.runWorker
  [16] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [17] java.lang.Thread.run

--- 9996563 ns (0.02%), 1 sample
  [ 0] kr.sanchez.specdeser.core.jakarta.FallbackParser.fastNaturalNumberCheck
  [ 1] kr.sanchez.specdeser.core.jakarta.FallbackParser.processNumber
  [ 2] kr.sanchez.specdeser.core.jakarta.FallbackParser.next
  [ 3] kr.sanchez.specdeser.core.jakarta.FallbackParser.next
  [ 4] kr.sanchez.specdeser.benchmark.SpeculativeBenchmark.parserSpeculativeRegular
  [ 5] kr.sanchez.specdeser.benchmark.jmh_generated.SpeculativeBenchmark_parserSpeculativeRegular_jmhTest.parserSpeculativeRegular_thrpt_jmhStub
  [ 6] kr.sanchez.specdeser.benchmark.jmh_generated.SpeculativeBenchmark_parserSpeculativeRegular_jmhTest.parserSpeculativeRegular_Throughput
  [ 7] jdk.internal.reflect.GeneratedMethodAccessor3.invoke
  [ 8] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 9] java.lang.reflect.Method.invoke
  [10] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] java.util.concurrent.FutureTask.run
  [13] java.util.concurrent.Executors$RunnableAdapter.call
  [14] java.util.concurrent.FutureTask.run
  [15] java.util.concurrent.ThreadPoolExecutor.runWorker
  [16] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [17] java.lang.Thread.run

--- 9996252 ns (0.02%), 1 sample
  [ 0] org.graalvm.compiler.java.BytecodeParser.getSwitchProfileSource
  [ 1] org.graalvm.compiler.java.BytecodeParser.genSwitch
  [ 2] org.graalvm.compiler.java.BytecodeParser.processBytecode
  [ 3] org.graalvm.compiler.java.BytecodeParser.iterateBytecodesForBlock
  [ 4] org.graalvm.compiler.java.BytecodeParser.handleBytecodeBlock
  [ 5] org.graalvm.compiler.java.BytecodeParser.processBlock
  [ 6] org.graalvm.compiler.java.BytecodeParser.build
  [ 7] org.graalvm.compiler.java.BytecodeParser.buildRootMethod
  [ 8] org.graalvm.compiler.java.GraphBuilderPhase$Instance.run
  [ 9] org.graalvm.compiler.java.GraphBuilderPhase.run
  [10] org.graalvm.compiler.java.GraphBuilderPhase.run
  [11] org.graalvm.compiler.phases.BasePhase.apply
  [12] org.graalvm.compiler.phases.BasePhase.apply
  [13] org.graalvm.compiler.phases.PhaseSuite.run
  [14] org.graalvm.compiler.phases.BasePhase.apply
  [15] org.graalvm.compiler.phases.BasePhase.apply
  [16] org.graalvm.compiler.phases.common.inlining.info.elem.InlineableGraph.parseBytecodes
  [17] org.graalvm.compiler.phases.common.inlining.info.elem.InlineableGraph.<init>
  [18] org.graalvm.compiler.phases.common.inlining.info.elem.Inlineable.getInlineableElement
  [19] org.graalvm.compiler.phases.common.inlining.info.AbstractInlineInfo.populateInlinableElements
  [20] org.graalvm.compiler.phases.common.inlining.walker.InliningData.processNextInvoke
  [21] org.graalvm.compiler.phases.common.inlining.walker.InliningData.moveForward
  [22] org.graalvm.compiler.phases.common.inlining.InliningPhase.run
  [23] org.graalvm.compiler.phases.common.inlining.InliningPhase.run
  [24] org.graalvm.compiler.phases.BasePhase.apply
  [25] org.graalvm.compiler.phases.BasePhase.apply
  [26] org.graalvm.compiler.phases.PhaseSuite.run
  [27] org.graalvm.compiler.phases.BasePhase.apply
  [28] org.graalvm.compiler.phases.BasePhase.apply
  [29] org.graalvm.compiler.core.GraalCompiler.emitFrontEnd
  [30] org.graalvm.compiler.core.GraalCompiler.compile
  [31] org.graalvm.compiler.core.GraalCompiler.compileGraph
  [32] org.graalvm.compiler.hotspot.HotSpotGraalCompiler.compileHelper
  [33] org.graalvm.compiler.hotspot.HotSpotGraalCompiler.compile
  [34] org.graalvm.compiler.hotspot.CompilationTask$HotSpotCompilationWrapper.performCompilation
  [35] org.graalvm.compiler.hotspot.CompilationTask$HotSpotCompilationWrapper.performCompilation
  [36] org.graalvm.compiler.core.CompilationWrapper.run
  [37] org.graalvm.compiler.hotspot.CompilationTask.runCompilation
  [38] org.graalvm.compiler.hotspot.HotSpotGraalCompiler.compileMethod
  [39] org.graalvm.compiler.hotspot.HotSpotGraalCompiler.compileMethod
  [40] org.graalvm.compiler.hotspot.HotSpotGraalCompiler.compileMethod
  [41] jdk.vm.ci.hotspot.HotSpotJVMCIRuntime.compileMethod

--- 9996082 ns (0.02%), 1 sample
  [ 0] kr.sanchez.specdeser.core.jakarta.FallbackParser.skipWS
  [ 1] kr.sanchez.specdeser.core.jakarta.FallbackParser.hasNext
  [ 2] kr.sanchez.specdeser.benchmark.SpeculativeBenchmark.parserSpeculativeRegular
  [ 3] kr.sanchez.specdeser.benchmark.jmh_generated.SpeculativeBenchmark_parserSpeculativeRegular_jmhTest.parserSpeculativeRegular_thrpt_jmhStub
  [ 4] kr.sanchez.specdeser.benchmark.jmh_generated.SpeculativeBenchmark_parserSpeculativeRegular_jmhTest.parserSpeculativeRegular_Throughput
  [ 5] jdk.internal.reflect.GeneratedMethodAccessor3.invoke
  [ 6] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 7] java.lang.reflect.Method.invoke
  [ 8] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [ 9] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [10] java.util.concurrent.FutureTask.run
  [11] java.util.concurrent.Executors$RunnableAdapter.call
  [12] java.util.concurrent.FutureTask.run
  [13] java.util.concurrent.ThreadPoolExecutor.runWorker
  [14] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [15] java.lang.Thread.run

--- 9993336 ns (0.02%), 1 sample
  [ 0] kr.sanchez.specdeser.core.jakarta.FallbackParser.skipWS
  [ 1] kr.sanchez.specdeser.core.jakarta.FallbackParser.next
  [ 2] kr.sanchez.specdeser.benchmark.SpeculativeBenchmark.parserSpeculativeRegular
  [ 3] kr.sanchez.specdeser.benchmark.jmh_generated.SpeculativeBenchmark_parserSpeculativeRegular_jmhTest.parserSpeculativeRegular_thrpt_jmhStub
  [ 4] kr.sanchez.specdeser.benchmark.jmh_generated.SpeculativeBenchmark_parserSpeculativeRegular_jmhTest.parserSpeculativeRegular_Throughput
  [ 5] jdk.internal.reflect.GeneratedMethodAccessor3.invoke
  [ 6] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 7] java.lang.reflect.Method.invoke
  [ 8] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [ 9] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [10] java.util.concurrent.FutureTask.run
  [11] java.util.concurrent.Executors$RunnableAdapter.call
  [12] java.util.concurrent.FutureTask.run
  [13] java.util.concurrent.ThreadPoolExecutor.runWorker
  [14] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [15] java.lang.Thread.run

--- 9989719 ns (0.02%), 1 sample
  [ 0] org.graalvm.compiler.virtual.phases.ea.EffectsClosure$MergeProcessor.setStateIndexes
  [ 1] org.graalvm.compiler.virtual.phases.ea.EffectsClosure.doMergeWithoutDead
  [ 2] org.graalvm.compiler.virtual.phases.ea.EffectsClosure.merge
  [ 3] org.graalvm.compiler.virtual.phases.ea.EffectsClosure.merge
  [ 4] org.graalvm.compiler.phases.graph.ReentrantBlockIterator.apply
  [ 5] org.graalvm.compiler.phases.graph.ReentrantBlockIterator.apply
  [ 6] org.graalvm.compiler.virtual.phases.ea.EffectsPhase.runAnalysis
  [ 7] org.graalvm.compiler.virtual.phases.ea.ReadEliminationPhase.run
  [ 8] org.graalvm.compiler.virtual.phases.ea.ReadEliminationPhase.run
  [ 9] org.graalvm.compiler.phases.BasePhase.apply
  [10] org.graalvm.compiler.phases.BasePhase.apply
  [11] org.graalvm.compiler.phases.PhaseSuite.run
  [12] org.graalvm.compiler.phases.BasePhase.apply
  [13] org.graalvm.compiler.phases.BasePhase.apply
  [14] org.graalvm.compiler.core.GraalCompiler.emitFrontEnd
  [15] org.graalvm.compiler.core.GraalCompiler.compile
  [16] org.graalvm.compiler.core.GraalCompiler.compileGraph
  [17] org.graalvm.compiler.hotspot.HotSpotGraalCompiler.compileHelper
  [18] org.graalvm.compiler.hotspot.HotSpotGraalCompiler.compile
  [19] org.graalvm.compiler.hotspot.CompilationTask$HotSpotCompilationWrapper.performCompilation
  [20] org.graalvm.compiler.hotspot.CompilationTask$HotSpotCompilationWrapper.performCompilation
  [21] org.graalvm.compiler.core.CompilationWrapper.run
  [22] org.graalvm.compiler.hotspot.CompilationTask.runCompilation
  [23] org.graalvm.compiler.hotspot.HotSpotGraalCompiler.compileMethod
  [24] org.graalvm.compiler.hotspot.HotSpotGraalCompiler.compileMethod
  [25] org.graalvm.compiler.hotspot.HotSpotGraalCompiler.compileMethod
  [26] jdk.vm.ci.hotspot.HotSpotJVMCIRuntime.compileMethod

--- 9980061 ns (0.02%), 1 sample
  [ 0] G1BlockOffsetTablePart::set_for_starts_humongous(HeapWordImpl**, unsigned long)
  [ 1] G1CollectedHeap::humongous_obj_allocate_initialize_regions(HeapRegion*, unsigned int, unsigned long)
  [ 2] G1CollectedHeap::humongous_obj_allocate(unsigned long)
  [ 3] G1CollectedHeap::attempt_allocation_humongous(unsigned long)
  [ 4] MemAllocator::allocate() const
  [ 5] TypeArrayKlass::allocate_common(int, bool, JavaThread*)
  [ 6] JVMCIRuntime::new_array_common(JavaThread*, Klass*, int, bool)
  [ 7] java.util.concurrent.ThreadLocalRandom.nextSeed
  [ 8] java.util.concurrent.ThreadLocalRandom.nextInt
  [ 9] jdk.internal.util.random.RandomSupport.boundedNextInt
  [10] java.util.random.RandomGenerator.nextInt
  [11] java.util.concurrent.ThreadLocalRandom.nextInt
  [12] kr.sanchez.specdeser.benchmark.SpeculativeBenchmark.parserSpeculativeRegular
  [13] kr.sanchez.specdeser.benchmark.jmh_generated.SpeculativeBenchmark_parserSpeculativeRegular_jmhTest.parserSpeculativeRegular_thrpt_jmhStub
  [14] kr.sanchez.specdeser.benchmark.jmh_generated.SpeculativeBenchmark_parserSpeculativeRegular_jmhTest.parserSpeculativeRegular_Throughput
  [15] jdk.internal.reflect.GeneratedMethodAccessor3.invoke
  [16] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [17] java.lang.reflect.Method.invoke
  [18] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [19] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [20] java.util.concurrent.FutureTask.run
  [21] java.util.concurrent.Executors$RunnableAdapter.call
  [22] java.util.concurrent.FutureTask.run
  [23] java.util.concurrent.ThreadPoolExecutor.runWorker
  [24] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [25] java.lang.Thread.run

--- 9974521 ns (0.02%), 1 sample
  [ 0] java.lang.System.arraycopy
  [ 1] java.io.ByteArrayInputStream.read
  [ 2] kr.sanchez.specdeser.core.jakarta.FallbackParser.loadIntoBuffer
  [ 3] kr.sanchez.specdeser.core.jakarta.FallbackParser.<init>
  [ 4] kr.sanchez.specdeser.benchmark.SpeculativeBenchmark.parserSpeculativeRegular
  [ 5] kr.sanchez.specdeser.benchmark.jmh_generated.SpeculativeBenchmark_parserSpeculativeRegular_jmhTest.parserSpeculativeRegular_thrpt_jmhStub
  [ 6] kr.sanchez.specdeser.benchmark.jmh_generated.SpeculativeBenchmark_parserSpeculativeRegular_jmhTest.parserSpeculativeRegular_Throughput
  [ 7] jdk.internal.reflect.GeneratedMethodAccessor3.invoke
  [ 8] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 9] java.lang.reflect.Method.invoke
  [10] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] java.util.concurrent.FutureTask.run
  [13] java.util.concurrent.Executors$RunnableAdapter.call
  [14] java.util.concurrent.FutureTask.run
  [15] java.util.concurrent.ThreadPoolExecutor.runWorker
  [16] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [17] java.lang.Thread.run

--- 9974060 ns (0.02%), 1 sample
  [ 0] ObjArrayAllocator::initialize(HeapWordImpl**) const
  [ 1] CollectedHeap::fill_with_objects(HeapWordImpl**, unsigned long, bool)
  [ 2] G1CollectedHeap::humongous_obj_allocate_initialize_regions(HeapRegion*, unsigned int, unsigned long)
  [ 3] G1CollectedHeap::humongous_obj_allocate(unsigned long)
  [ 4] G1CollectedHeap::attempt_allocation_humongous(unsigned long)
  [ 5] MemAllocator::allocate() const
  [ 6] TypeArrayKlass::allocate_common(int, bool, JavaThread*)
  [ 7] JVMCIRuntime::new_array_common(JavaThread*, Klass*, int, bool)
  [ 8] java.util.concurrent.ThreadLocalRandom.nextSeed
  [ 9] java.util.concurrent.ThreadLocalRandom.nextInt
  [10] jdk.internal.util.random.RandomSupport.boundedNextInt
  [11] java.util.random.RandomGenerator.nextInt
  [12] java.util.concurrent.ThreadLocalRandom.nextInt
  [13] kr.sanchez.specdeser.benchmark.SpeculativeBenchmark.parserSpeculativeRegular
  [14] kr.sanchez.specdeser.benchmark.jmh_generated.SpeculativeBenchmark_parserSpeculativeRegular_jmhTest.parserSpeculativeRegular_thrpt_jmhStub
  [15] kr.sanchez.specdeser.benchmark.jmh_generated.SpeculativeBenchmark_parserSpeculativeRegular_jmhTest.parserSpeculativeRegular_Throughput
  [16] jdk.internal.reflect.GeneratedMethodAccessor3.invoke
  [17] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [18] java.lang.reflect.Method.invoke
  [19] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [20] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [21] java.util.concurrent.FutureTask.run
  [22] java.util.concurrent.Executors$RunnableAdapter.call
  [23] java.util.concurrent.FutureTask.run
  [24] java.util.concurrent.ThreadPoolExecutor.runWorker
  [25] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [26] java.lang.Thread.run

          ns  percent  samples  top
  ----------  -------  -------  ---
 55155076710   95.78%     5515  /usr/lib/x86_64-linux-gnu/libc-2.31.so
   283244450    0.49%       28  HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const
   171840437    0.30%       17  SpinPause
   121559911    0.21%       12  void WeakProcessor::Task::work<G1STWIsAliveClosure, G1KeepAliveClosure>(unsigned int, G1STWIsAliveClosure*, G1KeepAliveClosure*)
   110671254    0.19%       11  __lock_text_start_[k]
   101004212    0.18%       10  G1ParCopyClosure<(G1Barrier)1, true>::do_oop(oopDesc**)
    60905264    0.11%        6  __vdso_clock_gettime
    60752219    0.11%        6  G1PrepareEvacuationTask::G1PrepareRegionsClosure::do_heap_region(HeapRegion*)
    60084935    0.10%        6  __softirqentry_text_start_[k]
    50602249    0.09%        5  ClassLoaderData::ChunkedHandleList::oops_do(OopClosure*)
    50193164    0.09%        5  ClassLoaderDataGraph::clear_claimed_marks()
    50045358    0.09%        5  G1FromCardCache::clear(unsigned int)
    40621932    0.07%        4  G1ParCopyClosure<(G1Barrier)0, true>::do_oop(oopDesc**)
    40492600    0.07%        4  G1RemSet::prepare_region_for_scan(HeapRegion*)
    39992509    0.07%        4  kr.sanchez.specdeser.core.jakarta.FallbackParser.processString
    39990916    0.07%        4  kr.sanchez.specdeser.core.jakarta.FallbackParser.skipWS
    30508953    0.05%        3  native_queued_spin_lock_slowpath_[k]
    30337926    0.05%        3  schedule_[k]
    30057545    0.05%        3  update_blocked_averages_[k]
    30047847    0.05%        3  G1CollectedHeap::humongous_obj_allocate_initialize_regions(HeapRegion*, unsigned int, unsigned long)
    30003635    0.05%        3  HeapRegionManager::find_contiguous_in_free_list(unsigned int)
    29995328    0.05%        3  java.lang.StringCoding.hasNegatives
    20224716    0.04%        2  malloc
    20152275    0.03%        2  OopMapCache::lookup(methodHandle const&, int, InterpreterOopMap*)
    20143930    0.03%        2  GCIdMark::GCIdMark(unsigned int)
    20127109    0.03%        2  G1RebuildFreeListTask::work(unsigned int)
    20107585    0.03%        2  syscall_enter_from_user_mode_[k]
    20083613    0.03%        2  get_futex_key_[k]
    20013944    0.03%        2  BitMap::clear_range(unsigned long, unsigned long)
    19999215    0.03%        2  java.util.Arrays.copyOfRange
    19998926    0.03%        2  kr.sanchez.specdeser.core.jakarta.FallbackParser.next
    19998775    0.03%        2  HeapRegionRemSet::clear_fcc()
    19997234    0.03%        2  kr.sanchez.specdeser.core.jakarta.ContextStack.<init>
    19994948    0.03%        2  kr.sanchez.specdeser.core.jakarta.FallbackParser.fastNaturalNumberCheck
    19990641    0.03%        2  MarkBitMap::do_clear(MemRegion, bool)
    19975421    0.03%        2  ObjArrayAllocator::initialize(HeapWordImpl**) const
    10280282    0.02%        1  pthread_cond_timedwait@@GLIBC_2.3.2
    10213000    0.02%        1  metaspace::VirtualSpaceList::vslist_nonclass()
    10200073    0.02%        1  __pthread_mutex_unlock_usercnt
    10185840    0.02%        1  CollectedHeap::tlab_alloc_reserve() const
    10180856    0.02%        1  _IO_default_xsputn
    10178975    0.02%        1  G1ParScanThreadState::steal_and_trim_queue(GenericTaskQueueSet<OverflowTaskQueue<ScannerTask, (MEMFLAGS)5, 131072u>, (MEMFLAGS)5>*)
    10178405    0.02%        1  G1FreeHumongousRegionClosure::do_heap_region(HeapRegion*)
    10173457    0.02%        1  G1ParScanThreadStateSet::state_for_worker(unsigned int)
    10166840    0.02%        1  OopStorage::BasicParState::increment_num_dead(unsigned long)
    10165097    0.02%        1  G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int)
    10160962    0.02%        1  G1PostEvacuateCollectionSetCleanupTask2::FreeCollectionSetTask::do_work(unsigned int)
    10159085    0.02%        1  OopMapSet::update_register_map(frame const*, RegisterMap*)
    10158967    0.02%        1  hash_futex_[k]
    10155701    0.02%        1  futex_wake_[k]
    10155234    0.02%        1  __tls_get_addr
    10151832    0.02%        1  AgeTable::AgeTable(bool)
    10148153    0.02%        1  JNIHandleBlock::oops_do(OopClosure*)
    10146541    0.02%        1  G1GCPhaseTimes::phase_name(G1GCPhaseTimes::GCParPhases)
    10137893    0.02%        1  WeakProcessorParTimeTracker::WeakProcessorParTimeTracker(WeakProcessorTimes*, OopStorageSet::WeakId, unsigned int)
    10120868    0.02%        1  G1CollectionSet::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int, unsigned int) const
    10118432    0.02%        1  CompositeElapsedCounterSource::seconds(PairRep<long, long>)
    10113543    0.02%        1  ConstantPool::impl_signature_ref_at(int, bool)
    10107189    0.02%        1  G1CollectionSet::iterate_part_from(HeapRegionClosure*, HeapRegionClaimer*, unsigned long, unsigned long, unsigned int, unsigned int) const [clone .part.0]
    10105358    0.02%        1  nmethod::oops_do(OopClosure*, bool)
    10098493    0.02%        1  G1MergeHeapRootsTask::G1FlushHumongousCandidateRemSets::do_heap_region(HeapRegion*)
    10098400    0.02%        1  HeapRegionRemSet::clear_locked(bool)
    10097444    0.02%        1  SparsePRT::clear()
    10091747    0.02%        1  G1EvacuationRootClosures::create_root_closures(G1ParScanThreadState*, G1CollectedHeap*)
    10080888    0.02%        1  G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWordImpl**, HeapWordImpl**, void const*)
    10080021    0.02%        1  HeapRegion::hr_clear(bool)
    10075143    0.02%        1  GangWorker::loop()
    10067104    0.02%        1  G1GCParPhaseTimesTracker::G1GCParPhaseTimesTracker(G1GCPhaseTimes*, G1GCPhaseTimes::GCParPhases, unsigned int, bool)
    10061341    0.02%        1  TaskTerminator::offer_termination(TerminatorTerminator*)
    10049105    0.02%        1  GCMemoryManager::gc_begin(bool, bool, bool)
    10048880    0.02%        1  VM_G1TryInitiateConcMark::doit()
    10048393    0.02%        1  OopStorage::BasicParState::BasicParState(OopStorage const*, unsigned int, bool)
    10047911    0.02%        1  TruncatedSeq::add(double)
    10046845    0.02%        1  GCTracer::send_reference_stats_event(ReferenceType, unsigned long) const
    10046446    0.02%        1  HeapRegionManager::iterate(HeapRegionClosure*) const
    10041660    0.02%        1  outputStream::do_vsnprintf_and_write_with_automatic_buffer(char const*, __va_list_tag*, bool)
    10039503    0.02%        1  MemoryPool::record_peak_memory_usage()
    10039170    0.02%        1  G1RegionMarkStatsCache::reset()
    10037814    0.02%        1  VMThread::is_VM_thread() const
    10036770    0.02%        1  stringStream::write(char const*, unsigned long)
    10032921    0.02%        1  G1CardTable::is_in_young(oopDesc*) const
    10013787    0.02%        1  org.graalvm.compiler.graph.iterators.FilteredNodeIterable.iterator
    10013263    0.02%        1  java.util.ArrayList.add
    10011681    0.02%        1  org.graalvm.compiler.phases.common.inlining.walker.CallsiteHolderExplorable.<init>
    10010987    0.02%        1  G1ClearBitMapTask::G1ClearBitmapHRClosure::do_heap_region(HeapRegion*)
    10005320    0.02%        1  G1Policy::preventive_collection_required(unsigned int)
    10003816    0.02%        1  org.graalvm.compiler.graph.Edges.getNodeUnsafe
    10002584    0.02%        1  MemRegion::intersection(MemRegion) const
    10001692    0.02%        1  org.graalvm.compiler.java.FrameStateBuilder.create
    10001452    0.02%        1  java.nio.charset.Charset.defaultCharset
    10000770    0.02%        1  jbyte_disjoint_arraycopy
    10000420    0.02%        1  java.util.regex.Pattern.lambda$DOT$4
     9999909    0.02%        1  exit_to_user_mode_prepare_[k]
     9999266    0.02%        1  FreeRegionList::remove_starting_at(HeapRegion*, unsigned int)
     9999188    0.02%        1  kr.sanchez.specdeser.core.jakarta.FallbackParser.slowNumberCheck
     9999067    0.02%        1  java.lang.AbstractStringBuilder.ensureCapacityInternal
     9998407    0.02%        1  pthread_mutex_lock
     9998265    0.02%        1  java.lang.Object.equals
     9997785    0.02%        1  kr.sanchez.specdeser.core.jakarta.FallbackParser.loadIntoBuffer
     9997073    0.02%        1  __pthread_cleanup_push
     9996252    0.02%        1  org.graalvm.compiler.java.BytecodeParser.getSwitchProfileSource
     9989719    0.02%        1  org.graalvm.compiler.virtual.phases.ea.EffectsClosure$MergeProcessor.setStateIndexes
     9980061    0.02%        1  G1BlockOffsetTablePart::set_for_starts_humongous(HeapWordImpl**, unsigned long)
     9974521    0.02%        1  java.lang.System.arraycopy
